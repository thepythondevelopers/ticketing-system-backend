/*! For license information please see main.js.LICENSE.txt */
(()=>{var __webpack_modules__={"./app.js":(__unused_webpack_module,__unused_webpack_exports,__webpack_require__)=>{eval("(__webpack_require__(/*! dotenv */ \"dotenv\").config)();\nconst mongoose = __webpack_require__(/*! mongoose */ \"mongoose\");\nconst express = __webpack_require__(/*! express */ \"express\");\nconst app = express();\nconst bodyParser = __webpack_require__(/*! body-parser */ \"body-parser\");\nconst cors = __webpack_require__(/*! cors */ \"cors\");\nconst cookieParser = __webpack_require__(/*! cookie-parser */ \"cookie-parser\");\n\n//Routes\nconst calenderRoutes = __webpack_require__(/*! ./routes/calender */ \"./routes/calender.js\");\nconst sidebarRoutes = __webpack_require__(/*! ./routes/sidebar */ \"./routes/sidebar.js\");\nconst authRoutes = __webpack_require__(/*! ./routes/auth */ \"./routes/auth.js\");\nconst stripeRoutes = __webpack_require__(/*! ./routes/stripe */ \"./routes/stripe.js\");\nconst dragRoutes = __webpack_require__(/*! ./routes/drag */ \"./routes/drag.js\");\nconst userRoutes = __webpack_require__(/*! ./routes/user */ \"./routes/user.js\");\nconst packageRoutes = __webpack_require__(/*! ./routes/package */ \"./routes/package.js\");\nconst menuDropdownRoutes = __webpack_require__(/*! ./routes/menuDropdown */ \"./routes/menuDropdown.js\");\nconst locationRoutes = __webpack_require__(/*! ./routes/location */ \"./routes/location.js\");\nconst categoryRoutes = __webpack_require__(/*! ./routes/category */ \"./routes/category.js\");\nconst documentManagementRoutes = __webpack_require__(/*! ./routes/documentManagement */ \"./routes/documentManagement.js\");\nconst plancategoryRoutes = __webpack_require__(/*! ./routes/planCategory */ \"./routes/planCategory.js\");\nconst planRoutes = __webpack_require__(/*! ./routes/plan */ \"./routes/plan.js\");\nconst officerRoutes = __webpack_require__(/*! ./routes/officer */ \"./routes/officer.js\");\nconst formRoutes = __webpack_require__(/*! ./routes/form */ \"./routes/form.js\");\nconst evacuationRoutes = __webpack_require__(/*! ./routes/evacuation */ \"./routes/evacuation.js\");\nconst releaseFormPartBRoutes = __webpack_require__(/*! ./routes/releaseFormPartB */ \"./routes/releaseFormPartB.js\");\nconst releaseFormPartCRoutes = __webpack_require__(/*! ./routes/releaseFormPartC */ \"./routes/releaseFormPartC.js\");\nconst uploadTemplateRoutes = __webpack_require__(/*! ./routes/uploadTemplate */ \"./routes/uploadTemplate.js\");\nconst ticketingRoutes = __webpack_require__(/*! ./routes/ticketing */ \"./routes/ticketing.js\");\nconst fireProtectionReportRoutes = __webpack_require__(/*! ./routes/fireProtectionReport */ \"./routes/fireProtectionReport.js\");\n//Connection\nmongoose.connect(process.env.DATABASE, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  useCreateIndex: true\n}).then(() => {\n  console.log('DATA CONNECTED');\n}).catch(err => {\n  console.log(err);\n});\napp.use(express.static('uploads'));\napp.use('/uploads', express.static('uploads'));\napp.use(express.static('uploads/location'));\napp.use('/uploads/location', express.static('uploads/location'));\napp.use(express.static('uploads/documents'));\napp.use('/uploads/documents', express.static('uploads/documents'));\napp.use(express.static('uploads/plan'));\napp.use('/uploads/plan', express.static('uploads/plan'));\napp.use(express.static('uploads/sidebar'));\napp.use('/uploads/sidebar', express.static('uploads/sidebar'));\napp.use(express.static('uploads/calender'));\napp.use('/uploads/calender', express.static('uploads/calender'));\napp.use(express.static('uploads/releaseform'));\napp.use('/uploads/releaseform', express.static('uploads/releaseform'));\napp.use(express.static('uploads/template'));\napp.use('/uploads/template', express.static('uploads/template'));\napp.use(express.static('uploads/ticketing'));\napp.use('/uploads/ticketing', express.static('uploads/ticketing'));\nconst port = process.env.PORT || 8000;\napp.use(bodyParser.json());\napp.use(cookieParser());\napp.use(cors());\n\n//My Routes\napp.use('/api', calenderRoutes);\napp.use('/api', sidebarRoutes);\napp.use('/api', authRoutes);\napp.use('/api', stripeRoutes);\napp.use('/api', dragRoutes);\napp.use('/api', userRoutes);\napp.use('/api', packageRoutes);\napp.use('/api', menuDropdownRoutes);\napp.use('/api', locationRoutes);\napp.use('/api', categoryRoutes);\napp.use('/api', documentManagementRoutes);\napp.use('/api', plancategoryRoutes);\napp.use('/api', planRoutes);\napp.use('/api', officerRoutes);\napp.use('/api', formRoutes);\napp.use('/api', evacuationRoutes);\napp.use('/api', releaseFormPartBRoutes);\napp.use('/api', releaseFormPartCRoutes);\napp.use('/api', uploadTemplateRoutes);\napp.use('/api', fireProtectionReportRoutes);\n//app.use('/api',ticketingRoutes);\n\napp.listen(port, () => {\n  console.log(`Server is running at port ${port}`);\n});\n\n//# sourceURL=webpack://management/./app.js?")},"./controllers/auth.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const User = __webpack_require__(/*! ../models/user */ "./models/user.js");\nconst UserToken = __webpack_require__(/*! ../models/userToken */ "./models/userToken.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst bcrypt = __webpack_require__(/*! bcrypt */ "bcrypt");\nconst {\n  v4: uuidv4\n} = __webpack_require__(/*! uuid */ "uuid");\nvar jwt = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");\n(__webpack_require__(/*! dotenv */ "dotenv").config)();\nconst moment = __webpack_require__(/*! moment */ "moment");\nconst sendGridMail = __webpack_require__(/*! @sendgrid/mail */ "@sendgrid/mail");\nsendGridMail.setApiKey(process.env.SENDGRID_API_KEY);\nexports.signup = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  const hash = bcrypt.hashSync(req.body.password, 10);\n  user_data = {\n    password: hash,\n    email: req.body.email,\n    first_name: req.body.first_name,\n    last_name: req.body.last_name,\n    company_name: req.body.company_name,\n    phone_number: req.body.phone_number,\n    street: req.body.street,\n    house_number: req.body.house_number,\n    postal_code: req.body.postal_code,\n    city: req.body.city,\n    land: req.body.land,\n    sales_tax_id: req.body.sales_tax_id\n  };\n  User.create(user_data).then(async user => {\n    res.json({\n      message: "Sign Up Successfully."\n    });\n  }).catch(err => {\n    return res.status(400).json({\n      message: "Unable to save in db",\n      error: err\n    });\n  });\n};\nexports.signin = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  if (req.body.role != \'admin\') {\n    const {\n      email\n    } = req.body;\n    role = \'user\';\n    const status = 1;\n    User.findOne({\n      email,\n      role,\n      status\n    }, function (err, user) {\n      if (!user) {\n        res.json({\n          error: \'User Not Found\'\n        });\n      } else {\n        bcrypt.compare(req.body.password, user.password, async function (err, result) {\n          if (result == true) {\n            //create token          \n\n            var token = jwt.sign({\n              _id: user._id,\n              email: user.email,\n              role: user.role\n            }, process.env.SECRET, {\n              expiresIn: \'1d\'\n            });\n            user_email = user.email;\n            user_role = user.role;\n            user_name = user.first_name + \' \' + user.last_name;\n            await UserToken.create({\n              token: token\n            }).then(usertoken => {}).catch(err => {\n              res.status(500).send({\n                message: err.message || "Some error occurred."\n              });\n            });\n            await UserToken.deleteOne({\n              createdAt: {\n                $lte: moment().subtract(2, \'days\').toDate()\n              }\n            });\n            res.json({\n              token,\n              user: {\n                user_name,\n                user_email,\n                user_role\n              }\n            });\n          } else {\n            res.json({\n              error: "Incorrect Password"\n            });\n          }\n        });\n      }\n    }).catch(err => {\n      res.status(500).send({\n        message: err.message || "Some error occurred."\n      });\n    });\n  } else {\n    const {\n      email,\n      role\n    } = req.body;\n    const status = 1;\n    User.findOne({\n      email,\n      role,\n      status\n    }, function (err, user) {\n      if (!user) {\n        res.json({\n          error: \'User Not Found\'\n        });\n      } else {\n        bcrypt.compare(req.body.password, user.password, async function (err, result) {\n          if (result == true) {\n            //create token          \n            var token = jwt.sign({\n              _id: user._id,\n              email: user.email,\n              role: user.role\n            }, process.env.SECRET, {\n              expiresIn: \'1d\'\n            });\n            user_email = user.email;\n            await UserToken.create({\n              token: token\n            }).then(usertoken => {}).catch(err => {\n              res.status(500).send({\n                message: err.message || "Some error occurred."\n              });\n            });\n            await UserToken.deleteOne({\n              created_at: {\n                $lte: moment().subtract(2, \'days\').toDate()\n              }\n            });\n            res.json({\n              token,\n              user: {\n                user_email\n              }\n            });\n          } else {\n            res.json({\n              error: "Incorrect Password"\n            });\n          }\n        });\n      }\n    }).catch(err => {\n      res.status(500).send({\n        message: err.message || "Some error occurred."\n      });\n    });\n  }\n};\nexports.forget_password = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  guid = uuidv4();\n  token = guid.replace(/-/g, "");\n  content = {\n    password_reset_token: token,\n    password_reset_time: Date.now()\n  };\n  User.findOne({\n    email: req.body.email\n  }).then(function (user) {\n    if (!user) {\n      res.json({\n        error: \'User Not Found\'\n      });\n    } else {\n      User.updateOne({\n        email: req.body.email\n      }, {\n        $set: content\n      }, {\n        new: true\n      }, async (err, calender) => {\n        if (err) {\n          return res.status(404).json({\n            error: err\n          });\n        }\n        if (calender === null) {\n          return res.status(404).json({\n            message: "No Data Found"\n          });\n        }\n        //url = process.env.BASE_URL+\'api/confirm-password/\'\n        url = \'https://enmel.pamsar.com/reset-password/\' + token;\n        try {\n          await sendGridMail.send(forgetpassword_email(req.body.email, url));\n          console.log(\'Test email sent successfully\');\n          res.send({\n            url: url,\n            message: \'Email Send Successfully\'\n          });\n        } catch (error) {\n          res.status(500).send({\n            message: error.message || "Some error occurred while generating reset password."\n          });\n        }\n      });\n    }\n  }).catch(err => {\n    res.status(500).send({\n      message: err.message\n    });\n  });\n};\nexports.change_password = (req, res) => {\n  const password_reset_token = req.params.password_reset_token;\n  User.findOne({\n    password_reset_token: password_reset_token,\n    password_reset_time: {\n      $gt: new Date(Date.now() - 0 * 60 * 60 * 1000)\n    }\n  }).then(function (user) {\n    if (!user) {\n      res.json({\n        error: \'Token Expire or Incorrect\'\n      });\n    } else {\n      const hash = bcrypt.hashSync(req.body.password, 10);\n      content = {\n        password: hash,\n        password_reset_token: ""\n      };\n      User.updateOne({\n        email: req.body.email\n      }, {\n        $set: content\n      }, {\n        new: true\n      }, (err, user) => {\n        if (err) {\n          return res.status(404).json({\n            error: err\n          });\n        }\n        if (user === null) {\n          return res.status(404).json({\n            message: "No Data Found"\n          });\n        }\n        res.send({\n          message: \'Password Changed Successfully.\'\n        });\n      });\n    }\n  }).catch(err => {\n    res.status(500).send({\n      message: err.message || "Some error occurred while updating password."\n    });\n  });\n};\nfunction forgetpassword_email(email, url) {\n  const body = `<!DOCTYPE html>\n    <html lang="en" xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml" xmlns:o="urn:schemas-microsoft-com:office:office">\n    <head>\n        <meta charset="utf-8">\n        <meta name="viewport" content="width=device-width">\n        <meta http-equiv="X-UA-Compatible" content="IE=edge">\n        <meta name="x-apple-disable-message-reformatting">\n        <title></title> \n    \n        <link href="https://fonts.googleapis.com/css?family=Poppins:200,300,400,500,600,700" rel="stylesheet">\n    \n        <style>\n    \n            html,\n    body {\n        margin: 0 auto !important;\n        padding: 0 !important;\n        height: 100% !important;\n        width: 100% !important;\n        background: #f1f1f1;\n    }\n    \n    \n    * {\n        -ms-text-size-adjust: 100%;\n        -webkit-text-size-adjust: 100%;\n    }\n    \n    \n    div[style*="margin: 16px 0"] {\n        margin: 0 !important;\n    }\n    \n    \n    table,\n    td {\n        mso-table-lspace: 0pt !important;\n        mso-table-rspace: 0pt !important;\n    }\n    \n    \n    table {\n        border-spacing: 0 !important;\n        border-collapse: collapse !important;\n        table-layout: fixed !important;\n        margin: 0 auto !important;\n    }\n    \n    \n    img {\n        -ms-interpolation-mode:bicubic;\n    }\n    \n    \n    a {\n        text-decoration: none;\n    }\n    \n    \n    *[x-apple-data-detectors],  /* iOS */\n    .unstyle-auto-detected-links *,\n    .aBn {\n        border-bottom: 0 !important;\n        cursor: default !important;\n        color: inherit !important;\n        text-decoration: none !important;\n        font-size: inherit !important;\n        font-family: inherit !important;\n        font-weight: inherit !important;\n        line-height: inherit !important;\n    }\n    \n    \n    .a6S {\n        display: none !important;\n        opacity: 0.01 !important;\n    }\n    \n    /* What it does: Prevents Gmail from changing the text color in conversation threads. */\n    .im {\n        color: inherit !important;\n    }\n    \n    /* If the above doesn\'t work, add a .g-img class to any image in question. */\n    img.g-img + div {\n        display: none !important;\n    }\n    \n    \n    @media only screen and (min-device-width: 320px) and (max-device-width: 374px) {\n        u ~ div .email-container {\n            min-width: 320px !important;\n        }\n    }\n    \n    @media only screen and (min-device-width: 375px) and (max-device-width: 413px) {\n        u ~ div .email-container {\n            min-width: 375px !important;\n        }\n    }\n    \n    @media only screen and (min-device-width: 414px) {\n        u ~ div .email-container {\n            min-width: 414px !important;\n        }\n    }\n    \n    \n        </style>\n    \n        <style>\n    \n          .primary{\n      background: #17bebb;\n    }\n    .bg_white{\n      background: #ffffff;\n    }\n    .bg_light{\n      background: #f7fafa;\n    }\n    .bg_black{\n      background: #000000;\n    }\n    .bg_dark{\n      background: rgba(0,0,0,.8);\n    }\n    .email-section{\n      padding:2.5em;\n    }\n    \n    /*BUTTON*/\n    .btn {\n      padding: 10px 65px;\n      display: inline-block;\n    }\n    .btn.btn-primary {\n      border-radius: 0;\n      background: #EC1C24;\n      color: #ffffff;\n    }\n    \n    h1,h2,h3,h4,h5,h6{\n      font-family: \'Poppins\', sans-serif;\n      color: #000000;\n      margin-top: 0;\n      font-weight: 600;\n    }\n    \n    body{\n      font-family: \'Poppins\', sans-serif;\n      font-weight: 400;\n      font-size: 16px;\n      line-height: 1.8;\n      color:#555555;\n    }\n    a {\n        color: #2C70F5;\n        word-break: break-all;\n    }\n    \n    table{\n    }\n    \n    .hero{\n      position: relative;\n      z-index: 0;\n    }\n    \n    .hero .text{\n      color: rgba(0,0,0,.3);\n    }\n    .hero .text h2{\n      color: #000;\n      font-size: 34px;\n      margin-bottom: 0;\n      font-weight: 200;\n      line-height: 1.4;\n    }\n    \n    .text-inner {\n      bordeR: 1px solid rgba(0,0,0,.05);\n      max-width: 80%;\n      margin: 0 auto;\n      padding: 2em;\n      background: #fff;\n    }\n    \n    \n    .social {\n      margin: 0 5px;\n    }\n    .footer p{\n    font-size:12px;\n    }\n    \n    @media screen and (max-width: 500px) {\n    \n    \n    }\n    \n    \n        </style>\n    \n    \n    </head>\n    \n    <body width="100%" style="margin: 0; padding: 0 !important; mso-line-height-rule: exactly; background-color: #f1f1f1;">\n      <center style="width: 100%; background-color: #f1f1f1;">\n        <div style="max-width: 768px; margin: 0 auto; background: #F7F9FD;" class="email-container">\n    \n          <table align="center" role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="margin: auto;">\n            <tr>\n              <td valign="top" style="padding: 1em 2.5em 0 2.5em;">\n                <table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%">\n                  <tr>\n                    <td class="logo" style="text-align: center;">\n                      <a href="#"><img src="${process.env.BASE_URL}/uploads/logo.png" alt="" title="" /></a>\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n            <tr>\n              <td valign="middle" class="hero" style="padding: 2em 0 2em 0;">\n                <table role="presentation" border="0" cellpadding="0" cellspacing="0" width="100%">\n                  <tr>\n                    <td style="text-align: left;">\n                      <div class="text-inner">\t\t\t\t          \t\n                        <h2>Reset Your Password</h2>\n                        <span class="name">Hi,</span>\n    <p>To set up a new password to your Enmeldung account, click "Reset Your Password" below:</p>\t\t\t\t           \t\n                         \n                  \n                  <p style="text-align: center;"><a href="${url}" class="btn btn-primary">Reset Password</a></p>\n                  <p>If you didn’t request this, you can ignore this email or let us know. Your password won’t change untill you create a new password</p>\n                       </div>\n                    </td>\n                  </tr>\n                </table>\n              </td>\n            </tr>\n          </table>\n          <table class="footer" align="center" role="presentation" cellspacing="0" cellpadding="0" border="0" width="100%" style="margin: auto;">\n        <tr>\n              <td class="" style="text-align: center; padding: 0 7%;">\n                \n    <p>© Copyright Enemeldung. All Rights Reserved. 2022</p>\n              </td>\n            </tr>\n          </table>\n    \n        </div>\n      </center>\n    </body>\n    </html>`;\n  return {\n    to: email,\n    from: process.env.SENDGRID_FROM_ADDRESS,\n    subject: \'Password Reset\',\n    text: body,\n    html: `${body}`\n  };\n}\nexports.logout = (req, res) => {\n  const token = req.headers["x-access-token"];\n  UserToken.deleteOne({\n    token: token\n  }).then(function (rowDeleted) {\n    if (rowDeleted.deletedCount == 1) {\n      res.status(200).send({\n        message: "Logout Successfully"\n      });\n    }\n    if (rowDeleted.deletedCount == 0) {\n      res.status(200).send({\n        message: "Not Found"\n      });\n    }\n    res.status(401).send({\n      message: "Something Went Wrong"\n    });\n  }, function (err) {\n    res.status(500).send({\n      message: err.message || "Some error occurred."\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/auth.js?')},"./controllers/calender.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Calender = __webpack_require__(/*! ../models/calender */ "./models/calender.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createCalender = (req, res) => {\n  console.log("request from create calender::", req.body);\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  //file_upload = (typeof(req.files.file_upload) != "undefined" && req.files.file_upload !== null) ? req.files.file_upload[0].filename : null; \n  data = {\n    startDate: req.body.startDate,\n    endDate: req.body.endDate,\n    title: req.body.title,\n    notes: req.body.notes,\n    user: req.user._id,\n    location: req.body.location\n    //file_upload : file_upload\n  };\n\n  calender = new Calender(data);\n  calender.save((err, calender) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to sabe in db"\n      });\n    }\n    return res.json(calender);\n  });\n};\nexports.getCalenderData = (req, res) => {\n  Calender.find({\n    user: req.user._id,\n    location: req.params.location_id\n  }).exec((err, calender) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(calender);\n  });\n};\nexports.updateCalender = async (req, res) => {\n  let id = req.params.id;\n  data = {\n    startDate: req.body.startDate,\n    endDate: req.body.endDate,\n    title: req.body.title,\n    notes: req.body.notes\n  };\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.file_upload != "undefined" && req.files.file_upload !== null) {\n      data.file_upload = req.files.file_upload[0].filename;\n    }\n  }\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.file_upload != "undefined" && req.files.file_upload !== null) {\n      await Calender.findOne({\n        _id: id,\n        user: req.user._id\n      }).exec((err, c) => {\n        if (err) {\n          return res.status(400).json({\n            message: "Something Went Wrong"\n          });\n        }\n        fs.unlink(\'./uploads/calender\' + c.file_upload, function (err) {\n          console.log(\'File deleted!\');\n        });\n      });\n    }\n  }\n  console.log("_id::", id, "user::", req.user._id);\n  await Calender.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, calender) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (calender === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(calender);\n  });\n};\nexports.deleteCalender = (req, res) => {\n  let id = req.params.id;\n  Calender.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, calender) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (calender.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (calender.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/calender.js?')},"./controllers/category.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Category = __webpack_require__(/*! ../models/category */ "./models/category.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nexports.createCategory = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    title: req.body.title,\n    color: req.body.color,\n    user: req.user._id\n  };\n  category = new Category(data);\n  category.save((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to save in db"\n      });\n    }\n    return res.json(category);\n  });\n};\nexports.getCategoryData = (req, res) => {\n  Category.find({\n    user: req.user._id\n  }).exec((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(category);\n  });\n};\nexports.getSingleCategoryData = (req, res) => {\n  Category.find({\n    user: req.user._id,\n    _id: req.params.id\n  }).exec((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(category);\n  });\n};\nexports.updateCategory = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    title: req.body.title,\n    color: req.body.color\n  };\n  Category.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, category) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (category === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(category);\n  });\n};\nexports.deleteCategory = (req, res) => {\n  let id = req.params.id;\n  Category.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, category) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (category.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (category.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/category.js?')},"./controllers/documentManagement.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const DocumentManagement = __webpack_require__(/*! ../models/documentManagement */ "./models/documentManagement.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createDocument = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  if (req.files && Object.entries(req.files).length === 0) {\n    return res.status(400).json({\n      message: "Please upload document or document is not in right format"\n    });\n  }\n  data = {\n    file_name: req.body.file_name,\n    user: req.user._id,\n    location: req.body.location,\n    date: req.body.date,\n    upload_document: req.files.upload_document[0].filename,\n    document_original_name: req.files.upload_document[0].originalname,\n    calendar_reminder_interval: req.body.calendar_reminder_interval,\n    note_item: req.body.note_item,\n    note_create_task: req.body.note_create_task\n  };\n  if (req.body.category != "null") {\n    data.category = req.body.category;\n  }\n  if (req.body.calendar_reminder_choose_date != "null") {\n    data.calendar_reminder_choose_date = req.body.calendar_reminder_choose_date;\n  }\n  document = new DocumentManagement(data);\n  document.save((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: err\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.updateDocument = async (req, res) => {\n  let id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    file_name: req.body.file_name,\n    date: req.body.date,\n    calendar_reminder_interval: req.body.calendar_reminder_interval,\n    note_item: req.body.note_item,\n    note_create_task: req.body.note_create_task\n  };\n  if (req.body.category != "null") {\n    data.category = req.body.category;\n  }\n  if (req.body.calendar_reminder_choose_date != "null") {\n    data.calendar_reminder_choose_date = req.body.calendar_reminder_choose_date;\n  }\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.upload_document != "undefined" && req.files.upload_document !== null) {\n      data.upload_document = req.files.upload_document[0].filename;\n      data.document_original_name = req.files.upload_document[0].originalname;\n    }\n  }\n  await DocumentManagement.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, l) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    if (req.files !== null && typeof req.files != "undefined") {\n      if (typeof req.files.upload_document != "undefined" && req.files.upload_document !== null) {\n        fs.unlink(\'./uploads/documents\' + l.upload_document, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n    }\n  });\n  await DocumentManagement.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, document) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (document === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.getSingleDocument = (req, res) => {\n  let id = req.params.id;\n  DocumentManagement.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.getDocumentData = (req, res) => {\n  const location = req.params.location_id;\n  DocumentManagement.find({\n    user: req.user._id,\n    location: location\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.deleteDocument = (req, res) => {\n  let id = req.params.id;\n  DocumentManagement.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, document) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (document.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (document.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/documentManagement.js?')},"./controllers/drag.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Drag = __webpack_require__(/*! ../models/drag */ "./models/drag.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nexports.createDrag = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    data: JSON.stringify(req.body.data),\n    user: req.user._id,\n    location: req.body.location\n  };\n  drag = new Drag(data);\n  drag.save((err, order) => {\n    if (err) {\n      return res.status(400).json({\n        message: err\n      });\n    }\n    return res.json(drag);\n  });\n};\nexports.getDragData = (req, res) => {\n  Drag.find({\n    user: req.user._id,\n    location: req.params.location_id\n  }).exec((err, drag) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(drag);\n  });\n};\nexports.updateDrag = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    data: JSON.stringify(req.body.data)\n  };\n  Drag.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, drag) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (drag === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(drag);\n  });\n};\nexports.deleteDrag = (req, res) => {\n  let id = req.params.id;\n  Drag.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, drag) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (drag.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (drag.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\nexports.deleteAllDrag = (req, res) => {\n  Drag.remove({}, function (err, result) {\n    if (err) {\n      console.log(err);\n    }\n    console.log(result);\n  });\n  return res.json({\n    message: "Delete All Drag Records Succcessfully."\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/drag.js?')},"./controllers/evacuation.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Evacuation = __webpack_require__(/*! ../models/evacuation */ "./models/evacuation.js");\nconst CacheEvacuation = __webpack_require__(/*! ../models/cache_evacuation */ "./models/cache_evacuation.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst User = __webpack_require__(/*! ../models/user */ "./models/user.js");\nexports.createCacheEvacuation = (req, res) => {\n  const errors = validationResult(req);\n  console.log("errors from evaluation::", errors);\n  console.log("request from evaluation::", req.body);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    user: req.user._id,\n    location: req.body.location,\n    evacuation_nr: req.body.evacuation_nr,\n    date: req.body.date,\n    general: req.body.general,\n    procedure: req.body.procedure,\n    evacuation_time: req.body.evacuation_time,\n    deficiency: req.body.deficiency\n  };\n  if (req.params.id != 0) {\n    console.log(typeof req.params.id);\n    CacheEvacuation.findOne({\n      _id: req.params.id,\n      user: req.user._id\n    }).exec((err, document) => {\n      if (err) {\n        console.log("working");\n        return res.status(400).json({\n          message: "Something Went Wrong"\n        });\n      } else if (document) {\n        CacheEvacuation.updateOne({\n          _id: req.params.id\n        }, {\n          $set: data\n        }, {\n          new: true\n        }, (err3, form3) => {\n          if (err3) {\n            return res.status(404).json({\n              error: err3\n            });\n          }\n          if (form3 === null) {\n            return res.status(404).json({\n              message: "No Data Found"\n            });\n          }\n          return res.json({\n            message: "Updated Successfully.",\n            data: evacuation\n          });\n        });\n      } else if (!document) {\n        var evacuation = new CacheEvacuation(data);\n        evacuation.save((err2, document2) => {\n          if (err2) {\n            return res.status(400).json({\n              message: err2\n            });\n          }\n          return res.json({\n            message: "Saved Successfully.",\n            data: evacuation\n          });\n        });\n      }\n    });\n  } else {\n    var evacuation = new CacheEvacuation(data);\n    evacuation.save((err2, document2) => {\n      if (err2) {\n        return res.status(400).json({\n          message: err2\n        });\n      }\n      return res.json({\n        message: "Saved Successfully.",\n        data: evacuation\n      });\n    });\n  }\n};\nexports.createEvacuation = (req, res) => {\n  const errors = validationResult(req);\n  console.log("errors from evaluation::", errors);\n  console.log("request from evaluation::", req.body);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    user: req.user._id,\n    location: req.body.location,\n    evacuation_nr: req.body.evacuation_nr,\n    date: req.body.date,\n    general: req.body.general,\n    procedure: req.body.procedure,\n    evacuation_time: req.body.evacuation_time,\n    deficiency: req.body.deficiency\n  };\n  var evacuation = new Evacuation(data);\n  evacuation.save((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: err\n      });\n    }\n    return res.json({\n      message: "Saved Successfully.",\n      data: evacuation\n    });\n  });\n};\nexports.getSingleEvacuation = (req, res) => {\n  let id = req.params.id;\n  Evacuation.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    } else if (document) {\n      return res.json(document);\n    } else if (!document) {\n      CacheEvacuation.findOne({\n        _id: id,\n        user: req.user._id\n      }).exec((err2, document2) => {\n        if (err2) {\n          return res.status(400).json({\n            message: "Something Went Wrong"\n          });\n        }\n        return res.json(document2);\n      });\n    }\n  });\n};\nexports.updateEvacuation = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    evacuation_nr: req.body.evacuation_nr,\n    date: req.body.date,\n    general: req.body.general,\n    procedure: req.body.procedure,\n    evacuation_time: req.body.evacuation_time,\n    deficiency: req.body.deficiency\n  };\n  Evacuation.updateOne({\n    _id: id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, form) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (form === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(form);\n  });\n};\nexports.getCacheEvacuationData = (req, res) => {\n  const location = req.params.location_id;\n  CacheEvacuation.find({\n    user: req.user._id,\n    location: location\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.getEvacuationData = (req, res) => {\n  const location = req.params.location_id;\n  Evacuation.find({\n    user: req.user._id,\n    location: location\n  }).exec((err, document) => {\n    if (err) {\n      CacheEvacuation.find({\n        user: req.user._id,\n        location: location\n      }).exec((err2, document2) => {\n        if (err2) {\n          return res.status(400).json({\n            message: "No Data Found"\n          });\n        }\n        return res.json(document2);\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.totalEvacuation = (req, res) => {\n  User.find({\n    email: req.params.email\n  }).select("_id").exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    if (document) {\n      console.log("document._id::", document[0]._id);\n      Evacuation.find({\n        user: document[0]._id\n      }).exec((err2, document2) => {\n        if (err2) {\n          return res.status(400).json({\n            message: "Something Went Wrong"\n          });\n        } else if (document2) {\n          console.log(document2);\n          return res.json(document2);\n        } else {\n          return res.json({\n            length: "0"\n          });\n        }\n      });\n    } else {\n      return res.json({\n        msg: "No such user found"\n      });\n    }\n  });\n};\nexports.deleteEvacuation = (req, res) => {\n  let id = req.params.id;\n  Evacuation.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, document) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (document.deletedCount == 1) {\n      //return res.json({id : id});\n      return res.json({\n        message: "Evacuation deleted successfully"\n      });\n    }\n    if (document.deletedCount == 0) {\n      CacheEvacuation.deleteOne({\n        _id: id,\n        user: req.user._id\n      }, (err3, document3) => {\n        if (err3) {\n          return res.status(404).json({\n            error: err3\n          });\n        }\n        if (document3.deletedCount == 1) {\n          //return res.json({id : id});\n          return res.json({\n            message: "Cache Evacuation deleted successfully"\n          });\n        }\n        if (document3.deletedCount == 0) {\n          return res.status(404).json({\n            message: "No Data Found"\n          });\n        }\n        return res.status(404).json({\n          message: "Something Went Wrong"\n        });\n      });\n    }\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/evacuation.js?')},"./controllers/fireProtectionReport.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const FireProtectionReport = __webpack_require__(/*! ../models/fireProtectionReport */ "./models/fireProtectionReport.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nexports.createFireProtectionReport = (req, res) => {\n  data = {\n    user: req.user._id,\n    businessYear: req.body.businessYear,\n    basicData: {\n      fire_protection_concept: req.body.basicData.fire_protection_concept,\n      from_date: req.body.basicData.from_date,\n      description: req.body.basicData.description\n    },\n    personen_mit: {\n      managing_director: req.body.personen_mit.managing_director,\n      managing_director_text: req.body.personen_mit.managing_director_text,\n      deputy_managing_director: req.body.personen_mit.deputy_managing_director,\n      deputy_managing_director_text: req.body.personen_mit.deputy_managing_director_text,\n      object_manager: req.body.personen_mit.object_manager,\n      object_manager_text: req.body.personen_mit.object_manager_text,\n      responsible_fire_protection: req.body.personen_mit.responsible_fire_protection,\n      responsible_fire_protection_text: req.body.personen_mit.responsible_fire_protection_text,\n      fire_protection_officer: req.body.personen_mit.fire_protection_officer,\n      last_training: req.body.personen_mit.last_training,\n      hours_spent: req.body.personen_mit.hours_spent,\n      safety_helper_soll: req.body.personen_mit.safety_helper_soll,\n      safety_helper_lst: req.body.personen_mit.safety_helper_lst\n    },\n    plant_fire_protection: {\n      bma: req.body.plant_fire_protection.bma,\n      kat1: req.body.plant_fire_protection.kat1,\n      kat2: req.body.plant_fire_protection.kat2,\n      kat3: req.body.plant_fire_protection.kat3,\n      kat4: req.body.plant_fire_protection.kat4,\n      house_alarm_system: req.body.plant_fire_protection.house_alarm_system,\n      detector_groups: req.body.plant_fire_protection.detector_groups,\n      detector: req.body.plant_fire_protection.detector,\n      push_button_detector: req.body.plant_fire_protection.push_button_detector,\n      last_training: req.body.plant_fire_protection.last_training,\n      last_inspection: req.body.plant_fire_protection.last_inspection,\n      extinguishing_system: req.body.plant_fire_protection.extinguishing_system,\n      sprinkler: req.body.plant_fire_protection.sprinkler,\n      wet: req.body.plant_fire_protection.wet,\n      dry: req.body.plant_fire_protection.dry,\n      tandem: req.body.plant_fire_protection.tandem,\n      pilot_operated: req.body.plant_fire_protection.pilot_operated,\n      gas_extinguishing_system: req.body.plant_fire_protection.gas_extinguishing_system,\n      other_extinguishing_system: req.body.plant_fire_protection.other_extinguishing_system,\n      types_of: req.body.plant_fire_protection.types_of,\n      gas: req.body.plant_fire_protection.gas,\n      gas_last_inspection: req.body.plant_fire_protection.gas_last_inspection,\n      rwa: req.body.plant_fire_protection.rwa,\n      natural: req.body.plant_fire_protection.natural,\n      machine: req.body.plant_fire_protection.machine,\n      wall_hydrants: req.body.plant_fire_protection.wall_hydrants,\n      typS: req.body.plant_fire_protection.typS,\n      typf: req.body.plant_fire_protection.typf,\n      riser_dry: req.body.plant_fire_protection.riser_dry,\n      safety_lighting: req.body.plant_fire_protection.safety_lighting,\n      alarm_system: req.body.plant_fire_protection.alarm_system,\n      type_last_inspection: req.body.plant_fire_protection.type_last_inspection\n    },\n    structural_fire_protection: {\n      smoke_protection_gates: req.body.structural_fire_protection.smoke_protection_gates,\n      smoke_protection_gates_inspection: req.body.structural_fire_protection.smoke_protection_gates_inspection,\n      noise_protection_doors: req.body.structural_fire_protection.noise_protection_doors,\n      noise_protection_doors_inspection: req.body.structural_fire_protection.noise_protection_doors_inspection,\n      fire_doors: req.body.structural_fire_protection.fire_doors,\n      fire_doors_inspection: req.body.structural_fire_protection.fire_doors_inspection,\n      fire_dampers: req.body.structural_fire_protection.fire_dampers,\n      fire_dampers_inspection: req.body.structural_fire_protection.fire_dampers_inspection,\n      thermal: req.body.structural_fire_protection.thermal,\n      machine: req.body.structural_fire_protection.machine,\n      hold_open_systems: req.body.structural_fire_protection.hold_open_systems,\n      hold_open_systems_inspection: req.body.structural_fire_protection.hold_open_systems_inspection\n    },\n    organizational_fire_protection: {\n      fire_protection_regulations_partA: req.body.organizational_fire_protection.fire_protection_regulations_partA,\n      fire_protection_regulations_partA_inspection: req.body.organizational_fire_protection.fire_protection_regulations_partA_inspection,\n      fire_protection_regulations_partB: req.body.organizational_fire_protection.fire_protection_regulations_partB,\n      fire_protection_regulations_partB_inspection: req.body.organizational_fire_protection.fire_protection_regulations_partB_inspection,\n      fire_protection_regulations_partC: req.body.organizational_fire_protection.fire_protection_regulations_partC,\n      fire_protection_regulations_partC_inspection: req.body.organizational_fire_protection.fire_protection_regulations_partC_inspection,\n      escape_rescue_plans: req.body.organizational_fire_protection.escape_rescue_plans,\n      escape_rescue_plans_inspection: req.body.organizational_fire_protection.escape_rescue_plans_inspection,\n      fire_protection_plans: req.body.organizational_fire_protection.fire_protection_plans,\n      fire_protection_plans_inspection: req.body.organizational_fire_protection.fire_protection_plans_inspection,\n      fire_safety_inspection: req.body.organizational_fire_protection.fire_safety_inspection,\n      authority_inspection: req.body.organizational_fire_protection.authority_inspection\n    },\n    events: {\n      total_fire_alarms: req.body.events.total_fire_alarms,\n      thereof_via_BMA: req.body.events.thereof_via_BMA,\n      thereof_via_emergency_call: req.body.events.thereof_via_emergency_call,\n      of_these_were: req.body.events.of_these_were,\n      fires: req.body.events.fires,\n      false_alarms: req.body.events.false_alarms,\n      fire_Hazardous_Work: req.body.events.fire_Hazardous_Work,\n      evacuation_exercises: req.body.events.evacuation_exercises\n    }\n  };\n  protectionReport = new FireProtectionReport(data);\n  protectionReport.save((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: err\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.getFireProtectionReport = (req, res) => {\n  let id = req.params.id;\n  FireProtectionReport.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.updateFireProtectionReport = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    businessYear: req.body.businessYear,\n    basicData: {\n      fire_protection_concept: req.body.basicData.fire_protection_concept,\n      from_date: req.body.basicData.from_date,\n      description: req.body.basicData.description\n    },\n    personen_mit: {\n      managing_director: req.body.personen_mit.managing_director,\n      managing_director_text: req.body.personen_mit.managing_director_text,\n      deputy_managing_director: req.body.personen_mit.deputy_managing_director,\n      deputy_managing_director_text: req.body.personen_mit.deputy_managing_director_text,\n      object_manager: req.body.personen_mit.object_manager,\n      object_manager_text: req.body.personen_mit.object_manager_text,\n      responsible_fire_protection: req.body.personen_mit.responsible_fire_protection,\n      responsible_fire_protection_text: req.body.personen_mit.responsible_fire_protection_text,\n      fire_protection_officer: req.body.personen_mit.fire_protection_officer,\n      last_training: req.body.personen_mit.last_training,\n      hours_spent: req.body.personen_mit.hours_spent,\n      safety_helper_soll: req.body.personen_mit.safety_helper_soll,\n      safety_helper_lst: req.body.personen_mit.safety_helper_lst\n    },\n    plant_fire_protection: {\n      bma: req.body.plant_fire_protection.bma,\n      kat1: req.body.plant_fire_protection.kat1,\n      kat2: req.body.plant_fire_protection.kat2,\n      kat3: req.body.plant_fire_protection.kat3,\n      kat4: req.body.plant_fire_protection.kat4,\n      house_alarm_system: req.body.plant_fire_protection.house_alarm_system,\n      detector_groups: req.body.plant_fire_protection.detector_groups,\n      detector: req.body.plant_fire_protection.detector,\n      push_button_detector: req.body.plant_fire_protection.push_button_detector,\n      last_training: req.body.plant_fire_protection.last_training,\n      last_inspection: req.body.plant_fire_protection.last_inspection,\n      extinguishing_system: req.body.plant_fire_protection.extinguishing_system,\n      sprinkler: req.body.plant_fire_protection.sprinkler,\n      wet: req.body.plant_fire_protection.wet,\n      dry: req.body.plant_fire_protection.dry,\n      tandem: req.body.plant_fire_protection.tandem,\n      pilot_operated: req.body.plant_fire_protection.pilot_operated,\n      gas_extinguishing_system: req.body.plant_fire_protection.gas_extinguishing_system,\n      other_extinguishing_system: req.body.plant_fire_protection.other_extinguishing_system,\n      types_of: req.body.plant_fire_protection.types_of,\n      gas: req.body.plant_fire_protection.gas,\n      gas_last_inspection: req.body.plant_fire_protection.gas_last_inspection,\n      rwa: req.body.plant_fire_protection.rwa,\n      natural: req.body.plant_fire_protection.natural,\n      machine: req.body.plant_fire_protection.machine,\n      wall_hydrants: req.body.plant_fire_protection.wall_hydrants,\n      typS: req.body.plant_fire_protection.typS,\n      typf: req.body.plant_fire_protection.typf,\n      riser_dry: req.body.plant_fire_protection.riser_dry,\n      safety_lighting: req.body.plant_fire_protection.safety_lighting,\n      alarm_system: req.body.plant_fire_protection.alarm_system,\n      type_last_inspection: req.body.plant_fire_protection.type_last_inspection\n    },\n    structural_fire_protection: {\n      smoke_protection_gates: req.body.structural_fire_protection.smoke_protection_gates,\n      smoke_protection_gates_inspection: req.body.structural_fire_protection.smoke_protection_gates_inspection,\n      noise_protection_doors: req.body.structural_fire_protection.noise_protection_doors,\n      noise_protection_doors_inspection: req.body.structural_fire_protection.noise_protection_doors_inspection,\n      fire_doors: req.body.structural_fire_protection.fire_doors,\n      fire_doors_inspection: req.body.structural_fire_protection.fire_doors_inspection,\n      fire_dampers: req.body.structural_fire_protection.fire_dampers,\n      fire_dampers_inspection: req.body.structural_fire_protection.fire_dampers_inspection,\n      thermal: req.body.structural_fire_protection.thermal,\n      machine: req.body.structural_fire_protection.machine,\n      hold_open_systems: req.body.structural_fire_protection.hold_open_systems,\n      hold_open_systems_inspection: req.body.structural_fire_protection.hold_open_systems_inspection\n    },\n    organizational_fire_protection: {\n      fire_protection_regulations_partA: req.body.organizational_fire_protection.fire_protection_regulations_partA,\n      fire_protection_regulations_partA_inspection: req.body.organizational_fire_protection.fire_protection_regulations_partA_inspection,\n      fire_protection_regulations_partB: req.body.organizational_fire_protection.fire_protection_regulations_partB,\n      fire_protection_regulations_partB_inspection: req.body.organizational_fire_protection.fire_protection_regulations_partB_inspection,\n      fire_protection_regulations_partC: req.body.organizational_fire_protection.fire_protection_regulations_partC,\n      fire_protection_regulations_partC_inspection: req.body.organizational_fire_protection.fire_protection_regulations_partC_inspection,\n      escape_rescue_plans: req.body.organizational_fire_protection.escape_rescue_plans,\n      escape_rescue_plans_inspection: req.body.organizational_fire_protection.escape_rescue_plans_inspection,\n      fire_protection_plans: req.body.organizational_fire_protection.fire_protection_plans,\n      fire_protection_plans_inspection: req.body.organizational_fire_protection.fire_protection_plans_inspection,\n      fire_safety_inspection: req.body.organizational_fire_protection.fire_safety_inspection,\n      authority_inspection: req.body.organizational_fire_protection.authority_inspection\n    },\n    events: {\n      total_fire_alarms: req.body.events.total_fire_alarms,\n      thereof_via_BMA: req.body.events.thereof_via_BMA,\n      thereof_via_emergency_call: req.body.events.thereof_via_emergency_call,\n      of_these_were: req.body.events.of_these_were,\n      fires: req.body.events.fires,\n      false_alarms: req.body.events.false_alarms,\n      fire_Hazardous_Work: req.body.events.fire_Hazardous_Work,\n      evacuation_exercises: req.body.events.evacuation_exercises\n    }\n  };\n  FireProtectionReport.updateOne({\n    _id: id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, form) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (form === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(form);\n  });\n};\nexports.getFireProtectionReportData = (req, res) => {\n  FireProtectionReport.find({\n    user: req.user._id\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.deleteFireProtectionReport = (req, res) => {\n  let id = req.params.id;\n  FireProtectionReport.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, document) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (document.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (document.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/fireProtectionReport.js?')},"./controllers/form.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Form = __webpack_require__(/*! ../models/form */ "./models/form.js");\nconst CacheRelease = __webpack_require__(/*! ../models/cache_release */ "./models/cache_release.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar html_to_pdf = __webpack_require__(/*! html-pdf-node */ "html-pdf-node");\nvar pdf = __webpack_require__(/*! html-pdf */ "html-pdf");\nexports.createCacheRelease = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    user: req.user._id,\n    location: req.body.location,\n    sequence_no: req.body.sequence_no,\n    job: {\n      welding_cutting_process: req.body.job.welding_cutting_process,\n      cutting_loop: req.body.job.cutting_loop,\n      soldering: req.body.job.soldering,\n      defrost: req.body.job.defrost,\n      hot_gluing: req.body.job.hot_gluing,\n      job_check_other: req.body.job.job_check_other,\n      other_text: req.body.job.other_text\n    },\n    places_of_work: {\n      work_location_position: req.body.places_of_work.work_location_position,\n      perimeter: req.body.places_of_work.perimeter,\n      height: req.body.places_of_work.height,\n      depth: req.body.places_of_work.depth\n    },\n    work_order: {\n      working_methods: req.body.work_order.working_methods,\n      to_be_caried_out: req.body.work_order.to_be_caried_out\n    },\n    file_hazard: {\n      removal_of_moveable_material: req.body.file_hazard.removal_of_moveable_material,\n      removal_of_wall_celling: req.body.file_hazard.removal_of_wall_celling,\n      coverage_stationary_material: req.body.file_hazard.coverage_stationary_material,\n      sealing_of_openings: req.body.file_hazard.sealing_of_openings,\n      file_hazard_other: req.body.file_hazard.file_hazard_other,\n      name: req.body.file_hazard.name,\n      executed: req.body.file_hazard.executed,\n      signature: req.body.file_hazard.signature,\n      fire_extinguisher: req.body.file_hazard.fire_extinguisher,\n      water: req.body.file_hazard.water,\n      powder: req.body.file_hazard.powder,\n      co2: req.body.file_hazard.co2,\n      other_agent: req.body.file_hazard.other_agent,\n      other_agent_name: req.body.file_hazard.other_agent_name,\n      fire_blanket: req.body.file_hazard.fire_blanket,\n      connected_water_hose: req.body.file_hazard.connected_water_hose,\n      bucket_filled_water: req.body.file_hazard.bucket_filled_water,\n      notification_fire_department: req.body.file_hazard.notification_fire_department,\n      other_extingushing_agent: req.body.file_hazard.other_extingushing_agent,\n      firepost_name: req.body.file_hazard.firepost_name,\n      during_file_hazardas_work_name: req.body.file_hazard.during_file_hazardas_work_name,\n      fire_guard_name: req.body.file_hazard.fire_guard_name,\n      after_completion_of_fire_hazardus: req.body.file_hazard.after_completion_of_fire_hazardus,\n      duration: req.body.file_hazard.duration,\n      hours: req.body.file_hazard.hours\n    },\n    explosion_hazard: {\n      removal_of_explosive_substance: req.body.explosion_hazard.removal_of_explosive_substance,\n      explosive_hazard_in_pipelines: req.body.explosion_hazard.explosive_hazard_in_pipelines,\n      sealing_of_stationary_containers: req.body.explosion_hazard.sealing_of_stationary_containers,\n      ventilation_measures: req.body.explosion_hazard.ventilation_measures,\n      setting_up_gas_detector: req.body.explosion_hazard.setting_up_gas_detector,\n      setting_up_gas_detector_text: req.body.explosion_hazard.setting_up_gas_detector_text,\n      explosion_hazard_other: req.body.explosion_hazard.explosion_hazard_other,\n      name: req.body.explosion_hazard.name,\n      executed: req.body.explosion_hazard.executed,\n      signature: req.body.explosion_hazard.signature,\n      monitoring: req.body.explosion_hazard.monitoring,\n      monitoring_name: req.body.explosion_hazard.monitoring_name,\n      after_complete_fire_hazard: req.body.explosion_hazard.after_complete_fire_hazard,\n      after_complete_fire_hazard_hours: req.body.explosion_hazard.after_complete_fire_hazard_hours,\n      after_complete_fire_hazard_name: req.body.explosion_hazard.after_complete_fire_hazard_name\n    },\n    alerting: {\n      fire_alarm: req.body.alerting.fire_alarm,\n      phone: req.body.alerting.phone,\n      fire_department_call_no: req.body.alerting.fire_department_call_no\n    },\n    client: {\n      date: req.body.client.date,\n      signature_of_plant_manager: req.body.client.signature_of_plant_manager\n    },\n    contractor: {\n      date: req.body.contractor.date,\n      signature_of_contractor: req.body.contractor.signature_of_contractor,\n      signature: req.body.contractor.signature\n    }\n  };\n  if (req.params.id != 0) {\n    console.log(typeof req.params.id);\n    CacheRelease.findOne({\n      _id: req.params.id,\n      user: req.user._id\n    }).exec((err, document) => {\n      if (err) {\n        console.log("working");\n        return res.status(400).json({\n          message: "Something Went Wrong"\n        });\n      } else if (document) {\n        CacheRelease.updateOne({\n          _id: req.params.id\n        }, {\n          $set: data\n        }, {\n          new: true\n        }, (err3, form3) => {\n          if (err3) {\n            return res.status(404).json({\n              error: err3\n            });\n          }\n          if (form3 === null) {\n            return res.status(404).json({\n              message: "No Data Found"\n            });\n          }\n          return res.json({\n            message: "Updated Successfully.",\n            data: release\n          });\n        });\n      } else if (!document) {\n        var release = new CacheRelease(data);\n        release.save((err2, document2) => {\n          if (err2) {\n            return res.status(400).json({\n              message: err2\n            });\n          }\n          return res.json({\n            message: "Saved Successfully.",\n            data: release\n          });\n        });\n      }\n    });\n  } else {\n    let release = new CacheRelease(data);\n    release.save((err2, document2) => {\n      if (err2) {\n        return res.status(400).json({\n          message: err2\n        });\n      }\n      return res.json({\n        message: "Saved Successfully.",\n        data: release\n      });\n    });\n  }\n};\nexports.createForm = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    user: req.user._id,\n    location: req.body.location,\n    sequence_no: req.body.sequence_no,\n    job: {\n      welding_cutting_process: req.body.job.welding_cutting_process,\n      cutting_loop: req.body.job.cutting_loop,\n      soldering: req.body.job.soldering,\n      defrost: req.body.job.defrost,\n      hot_gluing: req.body.job.hot_gluing,\n      job_check_other: req.body.job.job_check_other,\n      other_text: req.body.job.other_text\n    },\n    places_of_work: {\n      work_location_position: req.body.places_of_work.work_location_position,\n      perimeter: req.body.places_of_work.perimeter,\n      height: req.body.places_of_work.height,\n      depth: req.body.places_of_work.depth\n    },\n    work_order: {\n      working_methods: req.body.work_order.working_methods,\n      to_be_caried_out: req.body.work_order.to_be_caried_out\n    },\n    file_hazard: {\n      removal_of_moveable_material: req.body.file_hazard.removal_of_moveable_material,\n      removal_of_wall_celling: req.body.file_hazard.removal_of_wall_celling,\n      coverage_stationary_material: req.body.file_hazard.coverage_stationary_material,\n      sealing_of_openings: req.body.file_hazard.sealing_of_openings,\n      file_hazard_other: req.body.file_hazard.file_hazard_other,\n      name: req.body.file_hazard.name,\n      executed: req.body.file_hazard.executed,\n      signature: req.body.file_hazard.signature,\n      fire_extinguisher: req.body.file_hazard.fire_extinguisher,\n      water: req.body.file_hazard.water,\n      powder: req.body.file_hazard.powder,\n      co2: req.body.file_hazard.co2,\n      other_agent: req.body.file_hazard.other_agent,\n      other_agent_name: req.body.file_hazard.other_agent_name,\n      fire_blanket: req.body.file_hazard.fire_blanket,\n      connected_water_hose: req.body.file_hazard.connected_water_hose,\n      bucket_filled_water: req.body.file_hazard.bucket_filled_water,\n      notification_fire_department: req.body.file_hazard.notification_fire_department,\n      other_extingushing_agent: req.body.file_hazard.other_extingushing_agent,\n      firepost_name: req.body.file_hazard.firepost_name,\n      during_file_hazardas_work_name: req.body.file_hazard.during_file_hazardas_work_name,\n      fire_guard_name: req.body.file_hazard.fire_guard_name,\n      after_completion_of_fire_hazardus: req.body.file_hazard.after_completion_of_fire_hazardus,\n      duration: req.body.file_hazard.duration,\n      hours: req.body.file_hazard.hours\n    },\n    explosion_hazard: {\n      removal_of_explosive_substance: req.body.explosion_hazard.removal_of_explosive_substance,\n      explosive_hazard_in_pipelines: req.body.explosion_hazard.explosive_hazard_in_pipelines,\n      sealing_of_stationary_containers: req.body.explosion_hazard.sealing_of_stationary_containers,\n      ventilation_measures: req.body.explosion_hazard.ventilation_measures,\n      setting_up_gas_detector: req.body.explosion_hazard.setting_up_gas_detector,\n      setting_up_gas_detector_text: req.body.explosion_hazard.setting_up_gas_detector_text,\n      explosion_hazard_other: req.body.explosion_hazard.explosion_hazard_other,\n      name: req.body.explosion_hazard.name,\n      executed: req.body.explosion_hazard.executed,\n      signature: req.body.explosion_hazard.signature,\n      monitoring: req.body.explosion_hazard.monitoring,\n      monitoring_name: req.body.explosion_hazard.monitoring_name,\n      after_complete_fire_hazard: req.body.explosion_hazard.after_complete_fire_hazard,\n      after_complete_fire_hazard_hours: req.body.explosion_hazard.after_complete_fire_hazard_hours,\n      after_complete_fire_hazard_name: req.body.explosion_hazard.after_complete_fire_hazard_name\n    },\n    alerting: {\n      fire_alarm: req.body.alerting.fire_alarm,\n      phone: req.body.alerting.phone,\n      fire_department_call_no: req.body.alerting.fire_department_call_no\n    },\n    client: {\n      date: req.body.client.date,\n      signature_of_plant_manager: req.body.client.signature_of_plant_manager\n    },\n    contractor: {\n      date: req.body.contractor.date,\n      signature_of_contractor: req.body.contractor.signature_of_contractor,\n      signature: req.body.contractor.signature\n    }\n  };\n  form = new Form(data);\n  form.save((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: err\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.getSingleForm = (req, res) => {\n  let id = req.params.id;\n  Form.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.updateForm = (req, res) => {\n  console.log("request body::", req.body);\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    sequence_no: req.body.sequence_no,\n    job: {\n      welding_cutting_process: req.body.job.welding_cutting_process,\n      cutting_loop: req.body.job.cutting_loop,\n      soldering: req.body.job.soldering,\n      defrost: req.body.job.defrost,\n      hot_gluing: req.body.job.hot_gluing,\n      job_check_other: req.body.job.job_check_other,\n      other_text: req.body.job.other_text\n    },\n    places_of_work: {\n      work_location_position: req.body.places_of_work.work_location_position,\n      perimeter: req.body.places_of_work.perimeter,\n      height: req.body.places_of_work.height,\n      depth: req.body.places_of_work.depth\n    },\n    work_order: {\n      working_methods: req.body.work_order.working_methods,\n      to_be_caried_out: req.body.work_order.to_be_caried_out\n    },\n    file_hazard: {\n      removal_of_moveable_material: req.body.file_hazard.removal_of_moveable_material,\n      removal_of_wall_celling: req.body.file_hazard.removal_of_wall_celling,\n      coverage_stationary_material: req.body.file_hazard.coverage_stationary_material,\n      sealing_of_openings: req.body.file_hazard.sealing_of_openings,\n      file_hazard_other: req.body.file_hazard.file_hazard_other,\n      other_text: req.body.file_hazard.other_text,\n      name: req.body.file_hazard.name,\n      executed: req.body.file_hazard.executed,\n      signature: req.body.file_hazard.signature,\n      fire_extinguisher: req.body.file_hazard.fire_extinguisher,\n      other_extingushing_agent_name: req.body.file_hazard.other_extingushing_agent_name,\n      water: req.body.file_hazard.water,\n      powder: req.body.file_hazard.powder,\n      co2: req.body.file_hazard.co2,\n      other_agent: req.body.file_hazard.other_agent,\n      other_agent_name: req.body.file_hazard.other_agent_name,\n      fire_blanket: req.body.file_hazard.fire_blanket,\n      connected_water_hose: req.body.file_hazard.connected_water_hose,\n      bucket_filled_water: req.body.file_hazard.bucket_filled_water,\n      notification_fire_department: req.body.file_hazard.notification_fire_department,\n      other_extingushing_agent: req.body.file_hazard.other_extingushing_agent,\n      firepost_name: req.body.file_hazard.firepost_name,\n      during_file_hazardas_work_name: req.body.file_hazard.during_file_hazardas_work_name,\n      fire_guard_name: req.body.file_hazard.fire_guard_name,\n      after_completion_of_fire_hazardus: req.body.file_hazard.after_completion_of_fire_hazardus,\n      duration: req.body.file_hazard.duration,\n      hours: req.body.file_hazard.hours\n    },\n    explosion_hazard: {\n      removal_of_explosive_substance: req.body.explosion_hazard.removal_of_explosive_substance,\n      explosive_hazard_in_pipelines: req.body.explosion_hazard.explosive_hazard_in_pipelines,\n      sealing_of_stationary_containers: req.body.explosion_hazard.sealing_of_stationary_containers,\n      ventilation_measures: req.body.explosion_hazard.ventilation_measures,\n      setting_up_gas_detector: req.body.explosion_hazard.setting_up_gas_detector,\n      setting_up_gas_detector_text: req.body.explosion_hazard.setting_up_gas_detector_text,\n      explosion_hazard_other: req.body.explosion_hazard.explosion_hazard_other,\n      other_text: req.body.explosion_hazard.other_text,\n      name: req.body.explosion_hazard.name,\n      executed: req.body.explosion_hazard.executed,\n      signature: req.body.explosion_hazard.signature,\n      monitoring: req.body.explosion_hazard.monitoring,\n      monitoring_name: req.body.explosion_hazard.monitoring_name,\n      after_complete_fire_hazard: req.body.explosion_hazard.after_complete_fire_hazard,\n      after_complete_fire_hazard_hours: req.body.explosion_hazard.after_complete_fire_hazard_hours,\n      after_complete_fire_hazard_name: req.body.explosion_hazard.after_complete_fire_hazard_name\n    },\n    alerting: {\n      fire_alarm: req.body.alerting.fire_alarm,\n      phone: req.body.alerting.phone,\n      fire_department_call_no: req.body.alerting.fire_department_call_no\n    },\n    client: {\n      date: req.body.client.date,\n      signature_of_plant_manager: req.body.client.signature_of_plant_manager\n    },\n    contractor: {\n      date: req.body.contractor.date,\n      signature_of_contractor: req.body.contractor.signature_of_contractor,\n      signature: req.body.contractor.signature\n    }\n  };\n  Form.updateOne({\n    _id: id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, form) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (form === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(form);\n  });\n};\nexports.getCacheReleaseData = (req, res) => {\n  const location = req.params.location_id;\n  CacheRelease.find({\n    user: req.user._id,\n    location: location\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.getFormData = (req, res) => {\n  const location = req.params.location_id;\n  Form.find({\n    user: req.user._id,\n    location: location\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.deleteForm = (req, res) => {\n  let id = req.params.id;\n  Form.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, document) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (document.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (document.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\nexports.createpdf = (req, res) => {\n  let options = {\n    format: \'A4\'\n  };\n  // Example of options with args //\n  // let options = { format: \'A4\', args: [\'--no-sandbox\', \'--disable-setuid-sandbox\'] };\n\n  let html = "<h1>Welcome to html-pdf-node</h1>";\n  // or //\n  //let file = { url: "https://example.com" };\n  pdf.create(html, options).toFile(\'./uploads/businesscard.pdf\', function (err, res) {\n    if (err) return console.log(err);\n    console.log(res); // { filename: \'/app/businesscard.pdf\' }\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/form.js?')},"./controllers/location.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Location = __webpack_require__(/*! ../models/location */ "./models/location.js");\nconst Officer = __webpack_require__(/*! ../models/officer */ "./models/officer.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createLocation = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  location_image = typeof req.files.location_image != "undefined" && req.files.location_image !== null ? req.files.location_image[0].filename : null;\n  company_logo = typeof req.files.company_logo != "undefined" && req.files.company_logo !== null ? req.files.company_logo[0].filename : null;\n  data = {\n    company_name: req.body.company_name,\n    house_number: req.body.house_number,\n    street: req.body.street,\n    postal_code: req.body.postal_code,\n    city: req.body.city,\n    location_image: location_image,\n    show_as: req.body.show_as,\n    location: req.body.location,\n    company_logo: company_logo,\n    no_of_members: req.body.no_of_members,\n    percentage: req.body.percentage,\n    note: req.body.note,\n    user: req.user._id\n  };\n  location = new Location(data);\n  location.save(async (err, location) => {\n    if (err) {\n      return res.status(400).json({\n        error: "Unable to save in db"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.updateLocation = async (req, res) => {\n  let id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    console.log(errors);\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    company_name: req.body.company_name,\n    house_number: req.body.house_number,\n    street: req.body.street,\n    postal_code: req.body.postal_code,\n    city: req.body.city,\n    show_as: req.body.show_as,\n    location: req.body.location,\n    no_of_members: req.body.no_of_members,\n    percentage: req.body.percentage,\n    note: req.body.note,\n    user: req.user._id\n  };\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.company_logo != "undefined" && req.files.company_logo !== null) {\n      data.company_logo = req.files.company_logo[0].filename;\n    }\n    if (typeof req.files.location_image != "undefined" && req.files.location_image !== null) {\n      data.location_image = req.files.location_image[0].filename;\n    }\n  }\n  await Location.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, l) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    if (req.files !== null && typeof req.files != "undefined") {\n      if (typeof req.files.location_image != "undefined" && req.files.location_image !== null) {\n        fs.unlink(\'./uploads/location\' + l.location_image, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n      if (typeof req.files.company_logo != "undefined" && req.files.company_logo !== null) {\n        fs.unlink(\'./uploads/location\' + l.company_logo, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n    }\n  });\n  await Location.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, async (err, location) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (location === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    console.log("see::", req.user._id, " location::", req.params.id);\n    await Officer.updateOne({\n      user: req.user._id,\n      location: req.params.id\n    }, {\n      $set: {\n        "helpers.number_target": req.body.no_of_members * req.body.percentage / 100\n      }\n    }, {\n      new: true\n    }, async (err, officer) => {\n      if (err) {\n        return res.json(err);\n      } else {\n        return res.json({\n          "location": location,\n          "officer": officer\n        });\n      }\n    });\n  });\n};\nexports.getSingleLocation = (req, res) => {\n  let id = req.params.id;\n  Location.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getLocationData = (req, res) => {\n  Location.find({\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.deleteLocation = (req, res) => {\n  let id = req.params.id;\n  Location.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, location) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (location.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (location.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/location.js?')},"./controllers/menuDropdown.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const MenuDropdown = __webpack_require__(/*! ../models/menuDropdown */ "./models/menuDropdown.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nexports.createdropDown = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    event_calender: req.body.event_calender,\n    note: req.body.note,\n    board_fixed: req.body.board_fixed,\n    user: req.user._id,\n    location: req.body.location\n  };\n  menuDropdown = new MenuDropdown(data);\n  menuDropdown.save((err, data) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to sabe in db"\n      });\n    }\n    return res.json(data);\n  });\n};\nexports.getMenuDropdownData = (req, res) => {\n  MenuDropdown.find({\n    user: req.user._id,\n    location: req.params.location_id\n  }).exec((err, data) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(data);\n  });\n};\nexports.getMenuDropdownDataId = (req, res) => {\n  id = req.params.id;\n  MenuDropdown.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, data) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(data);\n  });\n};\nexports.updateMenuDropdown = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    event_calender: req.body.event_calender,\n    note: req.body.note,\n    board_fixed: req.body.board_fixed\n  };\n  MenuDropdown.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, data) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (data === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(data);\n  });\n};\nexports.deleteMenuDropDown = (req, res) => {\n  let id = req.params.id;\n  MenuDropdown.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, data) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (data.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (data.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/menuDropdown.js?')},"./controllers/officer.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Officer = __webpack_require__(/*! ../models/officer */ "./models/officer.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nexports.createOfficer = async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  await Officer.find({\n    user: req.user._id,\n    location: req.body.location\n  }).exec(async (err, officer) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    } else if (officer.length > 0) {\n      /*console.log("user",req.user._id,"location",req.body.location);\n      return res.status(400).json({"error":"Already Exists"});*/\n      data = {\n        user: req.user._id,\n        location: req.body.location,\n        managing_director: req.body.managing_director,\n        deputy_managing_director: req.body.deputy_managing_director,\n        object_director: req.body.object_director,\n        responsible_fire_protection: req.body.responsible_fire_protection,\n        fire_protection_officer: req.body.fire_protection_officer,\n        helpers: req.body.helpers\n      };\n      await Officer.updateOne({\n        user: req.user._id,\n        location: req.body.location\n      }, {\n        $set: data\n      }, {\n        new: true\n      }, (err, updated_officer) => {\n        if (err) {\n          return res.status(404).json({\n            error: err\n          });\n        }\n        if (updated_officer === null) {\n          return res.status(404).json({\n            message: "No Data Found"\n          });\n        }\n        return res.json({\n          message: \'Updated Successfully.\'\n        });\n      });\n    } else {\n      data = {\n        user: req.user._id,\n        location: req.body.location,\n        managing_director: req.body.managing_director,\n        deputy_managing_director: req.body.deputy_managing_director,\n        object_director: req.body.object_director,\n        responsible_fire_protection: req.body.responsible_fire_protection,\n        fire_protection_officer: req.body.fire_protection_officer,\n        helpers: req.body.helpers\n      };\n      officer = new Officer(data);\n      await officer.save((err, document) => {\n        if (err) {\n          return res.status(400).json({\n            message: err\n          });\n        }\n        return res.json({\n          message: \'Saved Successfully.\'\n        });\n      });\n    }\n  });\n};\nexports.getOfficer = (req, res) => {\n  if (req.body.location) {\n    console.log("req.body.location::", req.body.location);\n    Officer.find({\n      user: req.user._id,\n      location: req.body.location\n    }).exec((err, officer) => {\n      if (err) {\n        return res.status(400).json({\n          message: "Something Went Wrong"\n        });\n      }\n      return res.json(officer);\n    });\n  } else {\n    return res.status(400).json({\n      "error": "Providing a location is must"\n    });\n  }\n};\nexports.getOfficerById = (req, res) => {\n  Officer.findOne({\n    _id: req.params.id,\n    user: req.user._id\n  }).exec((err, officer) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(officer);\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/officer.js?')},"./controllers/package.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Package = __webpack_require__(/*! ../models/package */ "./models/package.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nexports.createPackage = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    title: req.body.title,\n    price: req.body.price,\n    package_include: req.body.package_include,\n    note: req.body.note\n  };\n  const s_package = new Package(data);\n  s_package.save((err, d_package) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to sabe in db"\n      });\n    }\n    return res.json(d_package);\n  });\n};\nexports.getPackage = (req, res) => {\n  Package.find().exec((err, d_package) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(d_package);\n  });\n};\nexports.getPackageById = (req, res) => {\n  Package.findOne({\n    _id: req.params.id\n  }).exec((err, d_package) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(d_package);\n  });\n};\nexports.updatePackage = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    title: req.body.title,\n    price: req.body.price,\n    package_include: req.body.package_include,\n    note: req.body.note\n  };\n  Package.updateOne({\n    _id: id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, d_package) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (d_package === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(d_package);\n  });\n};\nexports.deletePackage = (req, res) => {\n  let id = req.params.id;\n  Package.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, d_package) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (d_package.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (d_package.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/package.js?')},"./controllers/plan.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Plan = __webpack_require__(/*! ../models/plan */ "./models/plan.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createPlan = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    console.log("working1");\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  if (req.files && Object.entries(req.files).length === 0) {\n    console.log("working2");\n    return res.status(400).json({\n      message: "Please upload document or document is not in right format"\n    });\n  }\n  data = {\n    file_name: req.body.file_name,\n    user: req.user._id,\n    location: req.body.location,\n    date: req.body.date,\n    upload_document: req.files.upload_document[0].filename,\n    document_original_name: req.files.upload_document[0].originalname,\n    calendar_reminder_interval: req.body.calendar_reminder_interval,\n    note_item: req.body.note_item,\n    note_create_task: req.body.note_create_task\n  };\n  console.log("data from plans::", data);\n  if (req.body.calendar_reminder_choose_date != "null") {\n    data.calendar_reminder_choose_date = req.body.calendar_reminder_choose_date;\n  }\n  if (req.body.category != "null") {\n    data.category = req.body.category;\n  }\n  plan = new Plan(data);\n  plan.save((err, document) => {\n    if (err) {\n      console.log("error::", err);\n      return res.status(400).json({\n        message: err\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.updatePlan = async (req, res) => {\n  let id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    file_name: req.body.file_name,\n    date: req.body.date,\n    calendar_reminder_interval: req.body.calendar_reminder_interval,\n    note_item: req.body.note_item,\n    note_create_task: req.body.note_create_task\n  };\n  if (req.body.category != "null") {\n    data.category = req.body.category;\n  }\n  if (req.body.calendar_reminder_choose_date != "null") {\n    data.calendar_reminder_choose_date = req.body.calendar_reminder_choose_date;\n  }\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.upload_document != "undefined" && req.files.upload_document !== null) {\n      data.upload_document = req.files.upload_document[0].filename;\n      data.document_original_name = req.files.upload_document[0].originalname;\n    }\n  }\n  await Plan.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, l) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    if (req.files !== null && typeof req.files != "undefined") {\n      if (typeof req.files.upload_document != "undefined" && req.files.upload_document !== null) {\n        fs.unlink(\'./uploads/plan\' + l.upload_document, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n    }\n  });\n  await Plan.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, document) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (document === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.getSinglePlan = (req, res) => {\n  let id = req.params.id;\n  Plan.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.getPlanData = (req, res) => {\n  const location = req.params.location_id;\n  Plan.find({\n    user: req.user._id,\n    location: location\n  }).exec((err, document) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(document);\n  });\n};\nexports.deletePlan = (req, res) => {\n  let id = req.params.id;\n  Plan.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, document) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (document.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (document.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/plan.js?')},"./controllers/planCategory.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const PlanCategory = __webpack_require__(/*! ../models/planCategory */ "./models/planCategory.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nexports.createCategory = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    title: req.body.title,\n    color: req.body.color,\n    user: req.user._id\n  };\n  category = new PlanCategory(data);\n  category.save((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to save in db"\n      });\n    }\n    return res.json(category);\n  });\n};\nexports.getCategoryData = (req, res) => {\n  PlanCategory.find({\n    user: req.user._id\n  }).exec((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(category);\n  });\n};\nexports.getSingleCategoryData = (req, res) => {\n  PlanCategory.find({\n    user: req.user._id,\n    _id: req.params.id\n  }).exec((err, category) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(category);\n  });\n};\nexports.updateCategory = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    title: req.body.title,\n    color: req.body.color\n  };\n  PlanCategory.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, category) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (category === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(category);\n  });\n};\nexports.deleteCategory = (req, res) => {\n  let id = req.params.id;\n  PlanCategory.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, category) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (category.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (category.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/planCategory.js?')},"./controllers/releaseFormPartB.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const ReleaseFormPartB = __webpack_require__(/*! ../models/releaseFormPartB */ "./models/releaseFormPartB.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createFormPartB = (req, res) => {\n  console.log(req.files);\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  fire_security_regulation = typeof req.files.fire_security_regulation != "undefined" && req.files.fire_security_regulation !== null ? req.files.fire_security_regulation[0].filename : null;\n  file_upload = typeof req.files.file_upload != "undefined" && req.files.file_upload !== null ? req.files.file_upload[0].filename : null;\n  data = {\n    introduction: req.body.introduction,\n    fire_security_regulation: fire_security_regulation,\n    fire_protection: req.body.fire_protection,\n    fire_smoke_propegation: req.body.fire_smoke_propegation,\n    rescue_routes: req.body.rescue_routes,\n    sihnalization: req.body.sihnalization,\n    behaviour: req.body.behaviour,\n    report_fire: req.body.report_fire,\n    observaion_alarm: req.body.observaion_alarm,\n    bring_to_safety: req.body.bring_to_safety,\n    attemp_extingush: req.body.attemp_extingush,\n    special_rule: req.body.special_rule,\n    appendix: req.body.appendix,\n    file_upload: file_upload,\n    user: req.user._id,\n    location_id: req.body.location_id\n  };\n  releaseFormPartB = new ReleaseFormPartB(data);\n  releaseFormPartB.save((err, release) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to save in db",\n        error: err\n      });\n    }\n    return res.json(release);\n  });\n};\nexports.updateFormPartB = async (req, res) => {\n  console.log("working");\n  console.log(req.body);\n  console.log(req.params.location);\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    introduction: req.body.introduction,\n    fire_security_regulation: req.body.fire_security_regulation,\n    fire_protection: req.body.fire_protection,\n    fire_smoke_propegation: req.body.fire_smoke_propegation,\n    rescue_routes: req.body.rescue_routes,\n    sihnalization: req.body.sihnalization,\n    behaviour: req.body.behaviour,\n    report_fire: req.body.report_fire,\n    observaion_alarm: req.body.observaion_alarm,\n    bring_to_safety: req.body.bring_to_safety,\n    attemp_extingush: req.body.attemp_extingush,\n    special_rule: req.body.special_rule,\n    appendix: req.body.appendix,\n    file_upload: req.body.file_upload,\n    user: req.user._id,\n    location_id: req.body.location_id\n  };\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.fire_security_regulation != "undefined" && req.files.fire_security_regulation !== null) {\n      data.fire_security_regulation = req.files.fire_security_regulation[0].filename;\n    }\n    if (typeof req.files.file_upload != "undefined" && req.files.file_upload !== null) {\n      data.file_upload = req.files.file_upload[0].filename;\n    }\n  }\n  await ReleaseFormPartB.findOne({\n    location_id: req.params.location,\n    user: req.user._id\n  }).exec((err, l) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    if (req.files !== null && typeof req.files != "undefined") {\n      if (typeof req.files.fire_security_regulation != "undefined" && req.files.fire_security_regulation !== null) {\n        fs.unlink(\'./uploads/releaseform\' + l.fire_security_regulation, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n      if (typeof req.files.file_upload != "undefined" && req.files.file_upload !== null) {\n        fs.unlink(\'./uploads/releaseform\' + l.file_upload, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n    }\n  });\n  await ReleaseFormPartB.updateOne({\n    location_id: req.params.location,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, location) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (location === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getDataSingleFormB = (req, res) => {\n  let id = req.params.id;\n  ReleaseFormPartB.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getDataMultiFormB = (req, res) => {\n  let id = req.params.location;\n  ReleaseFormPartB.find({\n    location_id: id,\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getSingleFormB = (req, res) => {\n  let id = req.params.id;\n  ReleaseFormPartB.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getFormBData = (req, res) => {\n  ReleaseFormPartB.find({\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.deleteFormB = (req, res) => {\n  let id = req.params.id;\n  ReleaseFormPartB.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, location) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (location.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (location.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/releaseFormPartB.js?')},"./controllers/releaseFormPartC.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const ReleaseFormPartC = __webpack_require__(/*! ../models/releaseFormPartC */ "./models/releaseFormPartC.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createFormPartC = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  file_upload = typeof req.files.file_upload != "undefined" && req.files.file_upload !== null ? req.files.file_upload[0].filename : null;\n  data = {\n    introduction: req.body.introduction,\n    fire_protection: req.body.fire_protection,\n    alert_procedure: req.body.alert_procedure,\n    safety_measures: req.body.safety_measures,\n    extingush_measure: req.body.extingush_measure,\n    fire_department: req.body.fire_department,\n    aftercare: req.body.aftercare,\n    site_specific: req.body.site_specific,\n    appendix: req.body.appendix,\n    file_upload: file_upload,\n    user: req.user._id,\n    location_id: req.body.location_id\n  };\n  releaseFormPartC = new ReleaseFormPartC(data);\n  releaseFormPartC.save((err, release) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to save in db",\n        error: err\n      });\n    }\n    return res.status(201).json(release);\n  });\n};\nexports.updateFormPartC = async (req, res) => {\n  let id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    introduction: req.body.introduction,\n    fire_protection: req.body.fire_protection,\n    alert_procedure: req.body.alert_procedure,\n    safety_measures: req.body.safety_measures,\n    extingush_measure: req.body.extingush_measure,\n    fire_department: req.body.fire_department,\n    aftercare: req.body.aftercare,\n    site_specific: req.body.site_specific,\n    appendix: req.body.appendix\n  };\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.file_upload != "undefined" && req.files.file_upload !== null) {\n      data.file_upload = req.files.file_upload[0].filename;\n    }\n  }\n  await ReleaseFormPartC.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, l) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    if (req.files !== null && typeof req.files != "undefined") {\n      if (typeof req.files.file_upload != "undefined" && req.files.file_upload !== null) {\n        fs.unlink(\'./uploads/releaseform\' + l.file_upload, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n    }\n  });\n  await ReleaseFormPartC.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, location) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (location === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getSingleFormC = (req, res) => {\n  let id = req.params.id;\n  ReleaseFormPartC.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getFormCData = (req, res) => {\n  let id = req.params.id;\n  ReleaseFormPartC.find({\n    location_id: id,\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.deleteFormC = (req, res) => {\n  let id = req.params.id;\n  ReleaseFormPartC.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, location) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (location.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (location.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/releaseFormPartC.js?')},"./controllers/sidebar.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Sidebar = __webpack_require__(/*! ../models/sidebar */ "./models/sidebar.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createSidebar = (req, res) => {\n  //file_upload = (typeof(req.files.file_upload) != "undefined" && req.files.file_upload !== null) ? req.files.file_upload[0].filename : null;\n  data = {\n    title: req.body.title,\n    user: req.user._id,\n    location: req.body.location\n    //file_upload : file_upload\n  };\n\n  sidebar = new Sidebar(data);\n  sidebar.save((err, sidebar) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to sabe in db"\n      });\n    }\n    return res.json(sidebar);\n  });\n};\nexports.getSidebarData = (req, res) => {\n  Sidebar.find({\n    user: req.user._id,\n    checked: 0,\n    location: req.params.location_id\n  }).exec((err, order) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(order);\n  });\n};\nexports.getCheckedSidebarData = (req, res) => {\n  Sidebar.find({\n    user: req.user._id,\n    checked: 1,\n    location: req.params.location_id\n  }).exec((err, order) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(order);\n  });\n};\nexports.updateSidebar = async (req, res) => {\n  let id = req.params.id;\n  data = {\n    title: req.body.title,\n    checked: req.body.checked\n  };\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.file_upload != "undefined" && req.files.file_upload !== null) {\n      data.file_upload = req.files.file_upload[0].filename;\n    }\n  }\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.file_upload != "undefined" && req.files.file_upload !== null) {\n      await Sidebar.findOne({\n        _id: id,\n        user: req.user._id\n      }).exec((err, s) => {\n        if (err) {\n          return res.status(400).json({\n            message: "Something Went Wrong"\n          });\n        }\n        fs.unlink(\'./uploads/sidebar\' + s.file_upload, function (err) {\n          console.log(\'File deleted!\');\n        });\n      });\n    }\n  }\n  await Sidebar.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, sidebar) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (sidebar === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(sidebar);\n  });\n};\nexports.deleteSidebar = (req, res) => {\n  let id = req.params.id;\n  Sidebar.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, calender) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (calender.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (calender.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\nexports.checkedSidebar = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    checked: 1,\n    completedate: Date.now()\n  };\n  Sidebar.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, calender) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (calender === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(calender);\n  });\n};\nexports.uncheckedSidebar = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    checked: 0,\n    completedate: null\n  };\n  Sidebar.updateOne({\n    _id: id,\n    user: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true\n  }, (err, calender) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (calender === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(calender);\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/sidebar.js?')},"./controllers/stripe.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('(__webpack_require__(/*! dotenv */ "dotenv").config)();\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst stripe = __webpack_require__(/*! stripe */ "stripe")(process.env.STRIPE_KEY);\nexports.stripePayment = async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  stripe.customers.create({\n    email: req.user.email,\n    source: req.body.token\n  }).then(customer => {\n    return stripe.charges.create({\n      amount: 25 * 100,\n      description: \'Ticketing\',\n      currency: \'USD\',\n      customer: customer.id\n    });\n  }).then(charge => {\n    res.send("Success"); // If no error occurs\n  }).catch(err => {\n    res.send(err); // If some error occurs\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/stripe.js?')},"./controllers/ticketing.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const Ticketing = __webpack_require__(/*! ../models/ticketing */ "./models/ticketing.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createTicket = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  ticketing = typeof req.files.ticketing != "undefined" && req.files.ticketing !== null ? req.files.ticketing[0].filename : null;\n  data = {\n    ticketing: ticketing,\n    user: req.user._id\n  };\n  ut = new Ticketing(data);\n  ut.save((err, ut) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to save in db"\n      });\n    }\n    return res.json(ut);\n  });\n};\nexports.updateTicket = async (req, res) => {\n  let id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.ticketing != "undefined" && req.files.ticketing !== null) {\n      data.ticketing = req.files.ticketing[0].filename;\n    }\n    await Ticketing.findOne({\n      _id: id,\n      user: req.user._id\n    }).exec((err, l) => {\n      if (err) {\n        return res.status(400).json({\n          message: "Something Went Wrong"\n        });\n      }\n      if (req.files !== null && typeof req.files != "undefined") {\n        if (typeof req.files.ticketing != "undefined" && req.files.ticketing !== null) {\n          fs.unlink(\'./uploads/ticketing\' + l.ticketing, function (err) {\n            console.log(\'File deleted!\');\n          });\n        }\n      }\n    });\n    await Ticketing.updateOne({\n      _id: id,\n      user: req.user._id\n    }, {\n      $set: data\n    }, {\n      new: true\n    }, (err, location) => {\n      if (err) {\n        return res.status(404).json({\n          error: err\n        });\n      }\n      if (location === null) {\n        return res.status(404).json({\n          message: "No Data Found"\n        });\n      }\n      return res.json(location);\n    });\n  } else {\n    return res.json({\n      message: \'No Input Requested.\'\n    });\n  }\n};\nexports.getSingleTicket = (req, res) => {\n  let id = req.params.id;\n  Ticketing.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getTicketData = (req, res) => {\n  Ticketing.find({\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.deleteTicket = (req, res) => {\n  let id = req.params.id;\n  Ticketing.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, location) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (location.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (location.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/ticketing.js?')},"./controllers/uploadTemplate.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const UploadTemplate = __webpack_require__(/*! ../models/uploadTemplate */ "./models/uploadTemplate.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.createUploadTemplate = (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  template = typeof req.files.template != "undefined" && req.files.template !== null ? req.files.template[0].filename : null;\n  data = {\n    template: template,\n    user: req.user._id\n  };\n  ut = new UploadTemplate(data);\n  ut.save((err, ut) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Unable to save in db"\n      });\n    }\n    return res.json(ut);\n  });\n};\nexports.updateUploadTemplate = async (req, res) => {\n  let id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.template != "undefined" && req.files.template !== null) {\n      data.template = req.files.template[0].filename;\n    }\n    await UploadTemplate.findOne({\n      _id: id,\n      user: req.user._id\n    }).exec((err, l) => {\n      if (err) {\n        return res.status(400).json({\n          message: "Something Went Wrong"\n        });\n      }\n      if (req.files !== null && typeof req.files != "undefined") {\n        if (typeof req.files.template != "undefined" && req.files.template !== null) {\n          fs.unlink(\'./uploads/template\' + l.template, function (err) {\n            console.log(\'File deleted!\');\n          });\n        }\n      }\n    });\n    await UploadTemplate.updateOne({\n      _id: id,\n      user: req.user._id\n    }, {\n      $set: data\n    }, {\n      new: true\n    }, (err, location) => {\n      if (err) {\n        return res.status(404).json({\n          error: err\n        });\n      }\n      if (location === null) {\n        return res.status(404).json({\n          message: "No Data Found"\n        });\n      }\n      return res.json(location);\n    });\n  } else {\n    return res.json({\n      message: \'No Input Requested.\'\n    });\n  }\n};\nexports.getSingleTemplate = (req, res) => {\n  let id = req.params.id;\n  UploadTemplate.findOne({\n    _id: id,\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.getUploadDataData = (req, res) => {\n  UploadTemplate.find({\n    user: req.user._id\n  }).exec((err, location) => {\n    if (err) {\n      return res.status(400).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(location);\n  });\n};\nexports.deleteUploadData = (req, res) => {\n  let id = req.params.id;\n  UploadTemplate.deleteOne({\n    _id: id,\n    user: req.user._id\n  }, (err, location) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (location.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (location.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/uploadTemplate.js?')},"./controllers/user.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const User = __webpack_require__(/*! ../models/user */ "./models/user.js");\nconst {\n  validationResult\n} = __webpack_require__(/*! express-validator */ "express-validator");\n(__webpack_require__(/*! dotenv */ "dotenv").config)();\nvar fs = __webpack_require__(/*! fs */ "fs");\nexports.getUser = (req, res) => {\n  User.findOne({\n    _id: req.user._id\n  }).select(\'-password\').exec((err, user) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(user);\n  });\n};\nexports.updateUser = async (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    first_name: req.body.first_name,\n    last_name: req.body.last_name,\n    company_name: req.body.company_name,\n    phone_number: req.body.phone_number,\n    street: req.body.street,\n    house_number: req.body.house_number,\n    about: req.body.about,\n    postal_code: req.body.postal_code,\n    city: req.body.city,\n    land: req.body.land,\n    sales_tax_id: req.body.sales_tax_id\n  };\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.company_logo != "undefined" && req.files.company_logo !== null) {\n      data.company_logo = req.files.company_logo[0].filename;\n    }\n    if (typeof req.files.avatar != "undefined" && req.files.avatar !== null) {\n      data.avatar = req.files.avatar[0].filename;\n    }\n  }\n  await User.findOne({\n    _id: req.user._id\n  }).exec((err, u) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    if (req.files !== null && typeof req.files != "undefined") {\n      if (typeof req.files.avatar != "undefined" && req.files.avatar !== null) {\n        fs.unlink(\'./uploads\' + u.avatar, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n      if (typeof req.files.company_logo != "undefined" && req.files.company_logo !== null) {\n        fs.unlink(\'./uploads\' + u.company_logo, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n    }\n  });\n  User.updateOne({\n    _id: req.user._id\n  }, {\n    $set: data\n  }, {\n    new: true,\n    select: "-password"\n  }, (err, user) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (user === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(user);\n  });\n};\nexports.userDeactivate = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    status: 0\n  };\n  User.updateOne({\n    _id: id\n  }, {\n    $set: data\n  }, {\n    new: true,\n    select: "-password"\n  }, (err, user) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (user === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json({\n      message: "User Deactive Successfully."\n    });\n  });\n};\nexports.userActive = (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    status: 1\n  };\n  User.updateOne({\n    _id: id\n  }, {\n    $set: data\n  }, {\n    new: true,\n    select: "-password"\n  }, (err, user) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (user === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json({\n      message: "User Activate Successfully."\n    });\n  });\n};\nexports.getUserListing = (req, res) => {\n  User.find({\n    role: \'user\'\n  }).select(\'-password\').exec((err, user) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(user);\n  });\n};\nexports.getUserAdmin = (req, res) => {\n  User.findOne({\n    _id: req.params.id\n  }).select(\'-password\').exec((err, user) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    return res.json(user);\n  });\n};\nexports.updateUserAdmin = async (req, res) => {\n  id = req.params.id;\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({\n      error: errors.array()\n    });\n  }\n  data = {\n    first_name: req.body.first_name,\n    last_name: req.body.last_name,\n    company_name: req.body.company_name,\n    phone_number: req.body.phone_number,\n    street: req.body.street,\n    house_number: req.body.house_number,\n    about: req.body.about,\n    postal_code: req.body.postal_code,\n    city: req.body.city,\n    land: req.body.land,\n    sales_tax_id: req.body.sales_tax_id\n  };\n  if (req.files !== null && typeof req.files != "undefined") {\n    if (typeof req.files.company_logo != "undefined" && req.files.company_logo !== null) {\n      data.company_logo = req.files.company_logo[0].filename;\n    }\n    if (typeof req.files.avatar != "undefined" && req.files.avatar !== null) {\n      data.avatar = req.files.avatar[0].filename;\n    }\n  }\n  await User.findOne({\n    _id: req.user._id\n  }).exec((err, u) => {\n    if (err) {\n      return res.status(400).json({\n        message: "Something Went Wrong"\n      });\n    }\n    if (req.files !== null && typeof req.files != "undefined") {\n      if (typeof req.files.avatar != "undefined" && req.files.avatar !== null) {\n        fs.unlink(\'./uploads\' + u.avatar, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n      if (typeof req.files.company_logo != "undefined" && req.files.company_logo !== null) {\n        fs.unlink(\'./uploads\' + u.company_logo, function (err) {\n          console.log(\'File deleted!\');\n        });\n      }\n    }\n  });\n  User.updateOne({\n    _id: id\n  }, {\n    $set: data\n  }, {\n    new: true,\n    select: "-password"\n  }, (err, user) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (user === null) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.json(user);\n  });\n};\nexports.deleteUser = (req, res) => {\n  let id = req.params.id;\n  User.deleteOne({\n    _id: id,\n    role: \'user\'\n  }, (err, user) => {\n    if (err) {\n      return res.status(404).json({\n        error: err\n      });\n    }\n    if (user.deletedCount == 1) {\n      return res.json({\n        id: id\n      });\n    }\n    if (user.deletedCount == 0) {\n      return res.status(404).json({\n        message: "No Data Found"\n      });\n    }\n    return res.status(404).json({\n      message: "Something Went Wrong"\n    });\n  });\n};\n\n//# sourceURL=webpack://management/./controllers/user.js?')},"./middleware/auth.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('const UserToken = __webpack_require__(/*! ../models/userToken */ "./models/userToken.js");\nconst User = __webpack_require__(/*! ../models/user */ "./models/user.js");\nconst Drag = __webpack_require__(/*! ../models/drag */ "./models/drag.js");\nvar jwt = __webpack_require__(/*! jsonwebtoken */ "jsonwebtoken");\nexports.verifyToken = async (req, res, next) => {\n  const token = req.headers["x-access-token"];\n  if (!token) {\n    return res.status(403).send({\n      error: "A token is required for authentication"\n    });\n  }\n  try {\n    const decoded = jwt.verify(token, process.env.SECRET);\n    user_token = await UserToken.findOne({\n      token: token\n    });\n    if (user_token === null) {\n      return res.status(401).send({\n        error: "Token Not Found"\n      });\n    }\n    req.user = decoded;\n    user = await User.findOne({\n      _id: req.user._id,\n      status: 1\n    });\n    if (user === null) {\n      return res.status(401).send({\n        error: "User Account Deactive/Not Found"\n      });\n    }\n  } catch (err_m) {\n    return res.status(401).send({\n      error: "Invalid Token",\n      error_m: err_m\n    });\n  }\n  return next();\n};\nexports.checkDragExist = async (req, res, next) => {\n  if (!req.user._id) {\n    return res.status(400).json({\n      message: "User not found"\n    });\n  } else if (!req.body.location) {\n    return res.status(400).json({\n      message: "Location cannot be left empty"\n    });\n  } else if (req.user._id && req.body.location) {\n    drag = await Drag.findOne({\n      user: req.user._id,\n      location: req.body.location\n    });\n    if (drag != null) {\n      return res.status(401).json({\n        message: "Already Exist"\n      });\n    }\n    return next();\n  }\n};\nexports.adminroleCheck = (req, res, next) => {\n  if (req.user.role != \'admin\') {\n    return res.status(404).json({\n      err: "Does\'t Not have permission."\n    });\n  }\n  next();\n};\n\n//# sourceURL=webpack://management/./middleware/auth.js?')},"./models/cache_evacuation.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst cacheEvacuationSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: "User"\n  },\n  location: {\n    type: ObjectId,\n    ref: "Location"\n  },\n  evacuation_nr: {\n    type: String\n  },\n  date: {\n    type: Date\n  },\n  general: {\n    company_name: {\n      type: String\n    },\n    state: {\n      type: String\n    },\n    zip_code: {\n      type: String\n    },\n    city: {\n      type: String\n    },\n    employees: {\n      type: String\n    },\n    floors: {\n      type: String\n    },\n    fire_alarm_system: {\n      type: Boolean\n    },\n    evacuation_helper: {\n      type: Boolean\n    },\n    exercise_announced: {\n      type: Boolean\n    },\n    exercise_with_frog: {\n      type: Boolean\n    }\n  },\n  procedure: {\n    police: {\n      type: Boolean\n    },\n    fire_department: {\n      type: Boolean\n    },\n    fire_alarm_system: {\n      type: Boolean\n    },\n    fire_alarm_system2: {\n      type: Boolean\n    },\n    fire_department_key_depot: {\n      type: Boolean\n    },\n    others: {\n      type: Boolean\n    },\n    others2: {\n      type: Boolean\n    },\n    others_information: {\n      type: String\n    },\n    others2_information: {\n      type: String\n    },\n    assumed_situation: {\n      type: String\n    },\n    no_of_excercise_observation: {\n      type: String\n    }\n  },\n  evacuation_time: {\n    start_evacuation_drill: {\n      type: String\n    },\n    detection_damage_event: {\n      type: String\n    },\n    iffpw: {\n      type: String\n    },\n    arival: {\n      type: String\n    },\n    end_evacuation: {\n      type: String\n    },\n    assembly_way: {\n      type: String\n    },\n    total_time: {\n      type: String\n    },\n    building_cleared: {\n      type: String\n    }\n  },\n  deficiency: [{\n    title: {\n      type: String\n    },\n    description: {\n      type: String\n    }\n  }]\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("CacheEvacuation", cacheEvacuationSchema);\n\n//# sourceURL=webpack://management/./models/cache_evacuation.js?')},"./models/cache_release.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst cacheFormSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: "User"\n    //required : true\n  },\n\n  location: {\n    type: ObjectId,\n    ref: "Location"\n    //required : true\n  },\n\n  sequence_no: {\n    type: String\n    //required : true\n  },\n\n  job: {\n    welding_cutting_process: {\n      type: Boolean\n      //required : true\n    },\n\n    cutting_loop: {\n      type: Boolean\n      //required : true\n    },\n\n    soldering: {\n      type: Boolean\n      //required : true\n    },\n\n    defrost: {\n      type: Boolean\n      //required : true\n    },\n\n    hot_gluing: {\n      type: Boolean\n      //required : true\n    },\n\n    job_check_other: {\n      type: Boolean\n      //required : true\n    },\n\n    other_text: {\n      type: String\n    }\n  },\n  places_of_work: {\n    work_location_position: {\n      type: String\n      //required : true\n    },\n\n    perimeter: {\n      type: String\n      //required : true\n    },\n\n    height: {\n      type: String\n      //required : true\n    },\n\n    depth: {\n      type: String\n      //required : true\n    }\n  },\n\n  work_order: {\n    working_methods: {\n      type: String\n      //required : true\n    },\n\n    to_be_caried_out: {\n      type: String\n      //required : true\n    }\n  },\n\n  file_hazard: {\n    removal_of_moveable_material: {\n      type: Boolean\n      //required : true\n    },\n\n    removal_of_wall_celling: {\n      type: Boolean\n      //required : true\n    },\n\n    coverage_stationary_material: {\n      type: Boolean\n      //required : true\n    },\n\n    sealing_of_openings: {\n      type: Boolean\n      //required : true\n    },\n\n    file_hazard_other: {\n      type: Boolean\n      //required : true\n    },\n\n    name: {\n      type: String\n      //required : true\n    },\n\n    executed: {\n      type: String\n      //required : true\n    },\n\n    signature: {\n      type: String\n      //required : true\n    },\n\n    fire_extinguisher: {\n      type: Boolean\n      //required : true\n    },\n\n    water: {\n      type: Boolean\n      //required : true\n    },\n\n    powder: {\n      type: Boolean\n      //required : true\n    },\n\n    co2: {\n      type: Boolean\n      //required : true\n    },\n\n    other_agent: {\n      type: Boolean\n      //required : true\n    },\n\n    other_agent_name: {\n      type: String\n      //required : true\n    },\n\n    fire_blanket: {\n      type: Boolean\n      //required : true\n    },\n\n    connected_water_hose: {\n      type: Boolean\n      //required : true\n    },\n\n    bucket_filled_water: {\n      type: Boolean\n      //required : true\n    },\n\n    notification_fire_department: {\n      type: Boolean\n      //required : true\n    },\n\n    other_extingushing_agent: {\n      type: Boolean\n      //required : true\n    },\n\n    other_extingushing_agent_name: {\n      type: String\n      //required : true\n    },\n\n    firepost_name: {\n      type: String\n      //required : true\n    },\n\n    during_file_hazardas_work_name: {\n      type: Boolean\n      //required : true\n    },\n\n    fire_guard_name: {\n      type: String\n      //required : true\n    },\n\n    after_completion_of_fire_hazardus: {\n      type: Boolean\n      //required : true\n    },\n\n    duration: {\n      type: String\n      //required : true\n    },\n\n    hours: {\n      type: String\n      //required : true\n    },\n\n    other_text: {\n      type: String\n    }\n  },\n  explosion_hazard: {\n    removal_of_explosive_substance: {\n      type: Boolean\n      //required : true\n    },\n\n    explosive_hazard_in_pipelines: {\n      type: Boolean\n      //required : true\n    },\n\n    sealing_of_stationary_containers: {\n      type: Boolean\n      //required : true\n    },\n\n    ventilation_measures: {\n      type: Boolean\n      //required : true\n    },\n\n    setting_up_gas_detector: {\n      type: Boolean\n      //required : true\n    },\n\n    setting_up_gas_detector_text: {\n      type: String\n      //required : true\n    },\n\n    explosion_hazard_other: {\n      type: Boolean\n      //required : true\n    },\n\n    other_text: {\n      type: String\n      //required : true\n    },\n\n    name: {\n      type: String\n      //required : true\n    },\n\n    executed: {\n      type: String\n      //required : true\n    },\n\n    signature: {\n      type: String\n      //required : true\n    },\n\n    monitoring: {\n      type: Boolean\n      //required : true\n    },\n\n    monitoring_name: {\n      type: String\n      //required : true\n    },\n\n    after_complete_fire_hazard: {\n      type: Boolean\n      //required : true\n    },\n\n    after_complete_fire_hazard_hours: {\n      type: String\n      //required : true\n    },\n\n    after_complete_fire_hazard_name: {\n      type: String\n      //required : true\n    }\n  },\n\n  alerting: {\n    fire_alarm: {\n      type: String\n      //required : true\n    },\n\n    phone: {\n      type: String\n      //required : true\n    },\n\n    fire_department_call_no: {\n      type: String\n      //required : true\n    }\n  },\n\n  client: {\n    date: {\n      type: String\n      //required : true\n    },\n\n    signature_of_plant_manager: {\n      type: String\n      //required : true\n    }\n  },\n\n  contractor: {\n    date: {\n      type: String\n      //required : true\n    },\n\n    signature_of_contractor: {\n      type: String\n      //required : true\n    },\n\n    signature: {\n      type: String\n      //required : true\n    }\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("CacheRelease", cacheFormSchema);\n\n//# sourceURL=webpack://management/./models/cache_release.js?')},"./models/calender.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst calenderSchema = new Schema({\n  startDate: {\n    type: Date,\n    required: true,\n    trim: true\n  },\n  endDate: {\n    type: Date,\n    required: true,\n    trim: true\n  },\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  notes: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  //   file_upload:{\n  //     type:String,\n  //      trim : true\n  //  },\n  location: {\n    type: ObjectId,\n    ref: "Location",\n    required: true\n  },\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Calender", calenderSchema);\n\n//# sourceURL=webpack://management/./models/calender.js?')},"./models/category.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst categorySchema = new Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  color: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  // location :{\n  //     type : ObjectId,\n  //     ref: "Location",\n  //     required : true\n  // },\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Category", categorySchema);\n\n//# sourceURL=webpack://management/./models/category.js?')},"./models/documentManagement.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst documentManagementSchema = new Schema({\n  file_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  category: {\n    type: ObjectId,\n    ref: "Category"\n    //required : true\n  },\n\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  location: {\n    type: ObjectId,\n    ref: "Location",\n    required: true\n  },\n  date: {\n    type: Date,\n    required: true,\n    trim: true\n  },\n  upload_document: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  document_original_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  calendar_reminder_interval: {\n    type: String,\n    trim: true\n  },\n  calendar_reminder_choose_date: {\n    type: Date,\n    trim: true\n  },\n  note_item: {\n    type: String,\n    trim: true\n  },\n  note_create_task: {\n    type: String,\n    trim: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("DocumentManagement", documentManagementSchema);\n\n//# sourceURL=webpack://management/./models/documentManagement.js?')},"./models/drag.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst dragSchema = new Schema({\n  data: {\n    type: String,\n    required: true\n  },\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  location: {\n    type: ObjectId,\n    ref: "Location",\n    required: true\n  }\n}, {\n  timestamps: true\n});\n// dragSchema.set(\'toJSON\', { virtuals: true })\n// dragSchema.virtual(\'data_content\').\n//   get(function() { return JSON.parse(this.data); }).\n//   set(function(v) {\n//     const data = JSON.stringify(v);\n//     this.set({ data });\n//   });\nmodule.exports = mongoose.model("Drag", dragSchema);\n\n//# sourceURL=webpack://management/./models/drag.js?')},"./models/evacuation.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst evacuationSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  location: {\n    type: ObjectId,\n    ref: "Location",\n    required: true\n  },\n  evacuation_nr: {\n    type: String\n  },\n  date: {\n    type: Date\n  },\n  general: {\n    company_name: {\n      type: String\n    },\n    state: {\n      type: String\n    },\n    zip_code: {\n      type: String\n    },\n    city: {\n      type: String\n    },\n    employees: {\n      type: String\n    },\n    floors: {\n      type: String\n    },\n    fire_alarm_system: {\n      type: Boolean\n    },\n    evacuation_helper: {\n      type: Boolean\n    },\n    exercise_announced: {\n      type: Boolean\n    },\n    exercise_with_frog: {\n      type: Boolean\n    }\n  },\n  procedure: {\n    police: {\n      type: Boolean\n    },\n    fire_department: {\n      type: Boolean\n    },\n    fire_alarm_system: {\n      type: Boolean\n    },\n    fire_alarm_system2: {\n      type: Boolean\n    },\n    fire_department_key_depot: {\n      type: Boolean\n    },\n    others: {\n      type: Boolean\n    },\n    others2: {\n      type: Boolean\n    },\n    others_information: {\n      type: String\n    },\n    others2_information: {\n      type: String\n    },\n    assumed_situation: {\n      type: String\n    },\n    no_of_excercise_observation: {\n      type: String\n    }\n  },\n  evacuation_time: {\n    start_evacuation_drill: {\n      type: String\n    },\n    detection_damage_event: {\n      type: String\n    },\n    iffpw: {\n      type: String\n    },\n    arival: {\n      type: String\n    },\n    end_evacuation: {\n      type: String\n    },\n    assembly_way: {\n      type: String\n    },\n    total_time: {\n      type: String\n    },\n    building_cleared: {\n      type: String\n    }\n  },\n  deficiency: {\n    type: Object\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Evacuation", evacuationSchema);\n\n//# sourceURL=webpack://management/./models/evacuation.js?')},"./models/fireProtectionReport.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst fireProtectionReportSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  businessYear: {\n    type: String\n  },\n  basicData: {\n    fire_protection_concept: {\n      type: Boolean\n    },\n    from_date: {\n      type: String\n    },\n    description: {\n      type: String\n    }\n  },\n  personen_mit: {\n    managing_director: {\n      type: Boolean\n    },\n    managing_director_text: {\n      type: String\n    },\n    deputy_managing_director: {\n      type: Boolean\n    },\n    deputy_managing_director_text: {\n      type: String\n    },\n    object_manager: {\n      type: String\n    },\n    object_manager_text: {\n      type: String\n    },\n    responsible_fire_protection: {\n      type: Boolean\n    },\n    responsible_fire_protection_text: {\n      type: String\n    },\n    fire_protection_officer: {\n      type: Boolean\n    },\n    last_training: {\n      type: String\n    },\n    hours_spent: {\n      type: String\n    },\n    safety_helper_soll: {\n      type: String\n    },\n    safety_helper_lst: {\n      type: String\n    }\n  },\n  plant_fire_protection: {\n    bma: {\n      type: Boolean\n    },\n    kat1: {\n      type: Boolean\n    },\n    kat2: {\n      type: Boolean\n    },\n    kat3: {\n      type: Boolean\n    },\n    kat4: {\n      type: Boolean\n    },\n    house_alarm_system: {\n      type: Boolean\n    },\n    detector_groups: {\n      type: String\n    },\n    detector: {\n      type: String\n    },\n    push_button_detector: {\n      type: String\n    },\n    last_training: {\n      type: String\n    },\n    last_inspection: {\n      type: String\n    },\n    extinguishing_system: {\n      type: Boolean\n    },\n    sprinkler: {\n      type: Boolean\n    },\n    wet: {\n      type: Boolean\n    },\n    dry: {\n      type: Boolean\n    },\n    tandem: {\n      type: Boolean\n    },\n    pilot_operated: {\n      type: Boolean\n    },\n    gas_extinguishing_system: {\n      type: Boolean\n    },\n    other_extinguishing_system: {\n      type: Boolean\n    },\n    types_of: {\n      type: String\n    },\n    gas: {\n      type: String\n    },\n    gas_last_inspection: {\n      type: String\n    },\n    rwa: {\n      type: Boolean\n    },\n    natural: {\n      type: Boolean\n    },\n    machine: {\n      type: Boolean\n    },\n    wall_hydrants: {\n      type: Boolean\n    },\n    typS: {\n      type: Boolean\n    },\n    typf: {\n      type: Boolean\n    },\n    riser_dry: {\n      type: Boolean\n    },\n    safety_lighting: {\n      type: Boolean\n    },\n    alarm_system: {\n      type: Boolean\n    },\n    type_last_inspection: {\n      type: Boolean\n    }\n  },\n  structural_fire_protection: {\n    smoke_protection_gates: {\n      type: Boolean\n    },\n    smoke_protection_gates_inspection: {\n      type: String\n    },\n    noise_protection_doors: {\n      type: Boolean\n    },\n    noise_protection_doors_inspection: {\n      type: String\n    },\n    fire_doors: {\n      type: Boolean\n    },\n    fire_doors_inspection: {\n      type: String\n    },\n    fire_dampers: {\n      type: Boolean\n    },\n    fire_dampers_inspection: {\n      type: String\n    },\n    thermal: {\n      type: Boolean\n    },\n    machine: {\n      type: Boolean\n    },\n    hold_open_systems: {\n      type: Boolean\n    },\n    hold_open_systems_inspection: {\n      type: String\n    }\n  },\n  organizational_fire_protection: {\n    fire_protection_regulations_partA: {\n      type: Boolean\n    },\n    fire_protection_regulations_partA_inspection: {\n      type: String\n    },\n    fire_protection_regulations_partB: {\n      type: Boolean\n    },\n    fire_protection_regulations_partB_inspection: {\n      type: String\n    },\n    fire_protection_regulations_partC: {\n      type: Boolean\n    },\n    fire_protection_regulations_partC_inspection: {\n      type: String\n    },\n    escape_rescue_plans: {\n      type: Boolean\n    },\n    escape_rescue_plans_inspection: {\n      type: String\n    },\n    fire_protection_plans: {\n      type: Boolean\n    },\n    fire_protection_plans_inspection: {\n      type: String\n    },\n    fire_safety_inspection: {\n      type: String\n    },\n    authority_inspection: {\n      type: String\n    }\n  },\n  events: {\n    total_fire_alarms: {\n      type: String\n    },\n    thereof_via_BMA: {\n      type: String\n    },\n    thereof_via_emergency_call: {\n      type: String\n    },\n    of_these_were: {\n      type: String\n    },\n    fires: {\n      type: String\n    },\n    false_alarms: {\n      type: String\n    },\n    fire_Hazardous_Work: {\n      type: String\n    },\n    evacuation_exercises: {\n      type: String\n    }\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("fireProtectionReport", fireProtectionReportSchema);\n\n//# sourceURL=webpack://management/./models/fireProtectionReport.js?')},"./models/form.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst formSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: "User"\n    //required : true\n  },\n\n  location: {\n    type: ObjectId,\n    ref: "Location"\n    //required : true\n  },\n\n  sequence_no: {\n    type: String\n    //required : true\n  },\n\n  job: {\n    welding_cutting_process: {\n      type: Boolean\n      //required : true\n    },\n\n    cutting_loop: {\n      type: Boolean\n      //required : true\n    },\n\n    soldering: {\n      type: Boolean\n      //required : true\n    },\n\n    defrost: {\n      type: Boolean\n      //required : true\n    },\n\n    hot_gluing: {\n      type: Boolean\n      //required : true\n    },\n\n    job_check_other: {\n      type: Boolean\n      //required : true\n    },\n\n    other_text: {\n      type: String\n    }\n  },\n  places_of_work: {\n    work_location_position: {\n      type: String\n      //required : true\n    },\n\n    perimeter: {\n      type: String\n      //required : true\n    },\n\n    height: {\n      type: String\n      //required : true\n    },\n\n    depth: {\n      type: String\n      //required : true\n    }\n  },\n\n  work_order: {\n    working_methods: {\n      type: String\n      //required : true\n    },\n\n    to_be_caried_out: {\n      type: String\n      //required : true\n    }\n  },\n\n  file_hazard: {\n    removal_of_moveable_material: {\n      type: Boolean\n      //required : true\n    },\n\n    removal_of_wall_celling: {\n      type: Boolean\n      //required : true\n    },\n\n    coverage_stationary_material: {\n      type: Boolean\n      //required : true\n    },\n\n    sealing_of_openings: {\n      type: Boolean\n      //required : true\n    },\n\n    file_hazard_other: {\n      type: Boolean\n      //required : true\n    },\n\n    name: {\n      type: String\n      //required : true\n    },\n\n    executed: {\n      type: String\n      //required : true\n    },\n\n    signature: {\n      type: String\n      //required : true\n    },\n\n    fire_extinguisher: {\n      type: Boolean\n      //required : true\n    },\n\n    water: {\n      type: Boolean\n      //required : true\n    },\n\n    powder: {\n      type: Boolean\n      //required : true\n    },\n\n    co2: {\n      type: Boolean\n      //required : true\n    },\n\n    other_agent: {\n      type: Boolean\n      //required : true\n    },\n\n    other_agent_name: {\n      type: String\n      //required : true\n    },\n\n    fire_blanket: {\n      type: Boolean\n      //required : true\n    },\n\n    connected_water_hose: {\n      type: Boolean\n      //required : true\n    },\n\n    bucket_filled_water: {\n      type: Boolean\n      //required : true\n    },\n\n    notification_fire_department: {\n      type: Boolean\n      //required : true\n    },\n\n    other_extingushing_agent: {\n      type: Boolean\n      //required : true\n    },\n\n    other_extingushing_agent_name: {\n      type: String\n      //required : true\n    },\n\n    firepost_name: {\n      type: String\n      //required : true\n    },\n\n    during_file_hazardas_work_name: {\n      type: Boolean\n      //required : true\n    },\n\n    fire_guard_name: {\n      type: String\n      //required : true\n    },\n\n    after_completion_of_fire_hazardus: {\n      type: Boolean\n      //required : true\n    },\n\n    duration: {\n      type: String\n      //required : true\n    },\n\n    hours: {\n      type: String\n      //required : true\n    },\n\n    other_text: {\n      type: String\n    }\n  },\n  explosion_hazard: {\n    removal_of_explosive_substance: {\n      type: Boolean\n      //required : true\n    },\n\n    explosive_hazard_in_pipelines: {\n      type: Boolean\n      //required : true\n    },\n\n    sealing_of_stationary_containers: {\n      type: Boolean\n      //required : true\n    },\n\n    ventilation_measures: {\n      type: Boolean\n      //required : true\n    },\n\n    setting_up_gas_detector: {\n      type: Boolean\n      //required : true\n    },\n\n    setting_up_gas_detector_text: {\n      type: String\n      //required : true\n    },\n\n    explosion_hazard_other: {\n      type: Boolean\n      //required : true\n    },\n\n    other_text: {\n      type: String\n      //required : true\n    },\n\n    name: {\n      type: String\n      //required : true\n    },\n\n    executed: {\n      type: String\n      //required : true\n    },\n\n    signature: {\n      type: String\n      //required : true\n    },\n\n    monitoring: {\n      type: Boolean\n      //required : true\n    },\n\n    monitoring_name: {\n      type: String\n      //required : true\n    },\n\n    after_complete_fire_hazard: {\n      type: Boolean\n      //required : true\n    },\n\n    after_complete_fire_hazard_hours: {\n      type: String\n      //required : true\n    },\n\n    after_complete_fire_hazard_name: {\n      type: String\n      //required : true\n    }\n  },\n\n  alerting: {\n    fire_alarm: {\n      type: String\n      //required : true\n    },\n\n    phone: {\n      type: String\n      //required : true\n    },\n\n    fire_department_call_no: {\n      type: String\n      //required : true\n    }\n  },\n\n  client: {\n    date: {\n      type: String\n      //required : true\n    },\n\n    signature_of_plant_manager: {\n      type: String\n      //required : true\n    }\n  },\n\n  contractor: {\n    date: {\n      type: String\n      //required : true\n    },\n\n    signature_of_contractor: {\n      type: String\n      //required : true\n    },\n\n    signature: {\n      type: String\n      //required : true\n    }\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Form", formSchema);\n\n//# sourceURL=webpack://management/./models/form.js?')},"./models/location.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst locationSchema = new Schema({\n  company_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  house_number: {\n    type: String,\n    //required : true,\n    trim: true\n  },\n  street: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  postal_code: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  city: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  location_image: {\n    type: String,\n    trim: true\n  },\n  show_as: {\n    type: String,\n    trim: true,\n    required: true\n  },\n  /*location:{\n      type:String,\n      //required : true,\n      trim : true\n  },*/\n  company_logo: {\n    type: String,\n    trim: true\n  },\n  no_of_members: {\n    type: Number,\n    trim: true\n    //required: true\n  },\n\n  percentage: {\n    type: Number,\n    trim: true\n    //required: true\n  },\n\n  note: {\n    type: String,\n    trim: true\n  },\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Location", locationSchema);\n\n//# sourceURL=webpack://management/./models/location.js?')},"./models/menuDropdown.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst menuDropdownSchema = new Schema({\n  event_calender: {\n    type: Boolean,\n    default: 1,\n    //0=>False 1=>True/Active\n    required: true\n  },\n  note: {\n    type: Boolean,\n    default: 1,\n    //0=>False 1=>True/Active\n    required: true\n  },\n  board_fixed: {\n    type: Boolean,\n    default: 1,\n    //0=>False 1=>True/Active\n    required: true\n  },\n  location: {\n    type: ObjectId,\n    ref: "Location",\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("MenuDropdown", menuDropdownSchema);\n\n//# sourceURL=webpack://management/./models/menuDropdown.js?')},"./models/officer.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst officerSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  location: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  managing_director: {\n    name: {\n      type: String,\n      required: true\n    },\n    first_name: {\n      type: String,\n      required: true\n    },\n    contact_number: {\n      type: Number,\n      required: true\n    },\n    email: {\n      type: String,\n      required: true\n    }\n  },\n  deputy_managing_director: {\n    name: {\n      type: String\n    },\n    first_name: {\n      type: String\n    },\n    contact_number: {\n      type: Number\n    },\n    email: {\n      type: String\n    }\n  },\n  object_director: {\n    name: {\n      type: String\n    },\n    first_name: {\n      type: String\n    },\n    contact_number: {\n      type: Number\n    },\n    email: {\n      type: String\n    }\n  },\n  responsible_fire_protection: {\n    name: {\n      type: String\n    },\n    first_name: {\n      type: String\n    },\n    contact_number: {\n      type: Number\n    },\n    email: {\n      type: String\n    }\n  },\n  fire_protection_officer: {\n    name: {\n      type: String,\n      required: true\n    },\n    first_name: {\n      type: String,\n      required: true\n    },\n    contact_number: {\n      type: Number,\n      required: true\n    },\n    email: {\n      type: String,\n      required: true\n    }\n  },\n  helpers: {\n    number_target: {\n      type: Number\n    },\n    actual_target: {\n      type: Number\n    }\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Officer", officerSchema);\n\n//# sourceURL=webpack://management/./models/officer.js?')},"./models/package.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst packageSchema = new Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  price: {\n    type: Number,\n    required: true,\n    trim: true\n  },\n  package_include: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  note: {\n    type: String,\n    required: true,\n    trim: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Package", packageSchema);\n\n//# sourceURL=webpack://management/./models/package.js?')},"./models/plan.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst planSchema = new Schema({\n  file_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  category: {\n    type: ObjectId,\n    ref: "planCategory"\n    //  required : true\n  },\n\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  location: {\n    type: ObjectId,\n    ref: "Location",\n    required: true\n  },\n  date: {\n    type: Date,\n    required: true,\n    trim: true\n  },\n  upload_document: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  document_original_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  calendar_reminder_interval: {\n    type: String,\n    trim: true\n  },\n  calendar_reminder_choose_date: {\n    type: Date,\n    trim: true\n  },\n  note_item: {\n    type: String,\n    trim: true\n  },\n  note_create_task: {\n    type: String,\n    trim: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Plan", planSchema);\n\n//# sourceURL=webpack://management/./models/plan.js?')},"./models/planCategory.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst planCategorySchema = new Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  color: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  // location :{\n  //     type : ObjectId,\n  //     ref: "Location",\n  //     required : true\n  // },\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("planCategory", planCategorySchema);\n\n//# sourceURL=webpack://management/./models/planCategory.js?')},"./models/releaseFormPartB.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst releaseFormPartBSchema = new Schema({\n  introduction: {\n    type: String,\n    //required : true,\n    trim: true\n  },\n  location_id: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  fire_security_regulation: {\n    type: String,\n    //required : true,\n    trim: true\n  },\n  fire_protection: {\n    type: String,\n    //required : true,\n    trim: true\n  },\n  fire_smoke_propegation: {\n    type: String,\n    //required : true,\n    trim: true\n  },\n  rescue_routes: {\n    type: String,\n    //required : true,\n    trim: true\n  },\n  sihnalization: {\n    type: String,\n    trim: true\n  },\n  behaviour: {\n    type: String,\n    trim: true\n  },\n  report_fire: {\n    type: String,\n    trim: true\n  },\n  observaion_alarm: {\n    type: String,\n    trim: true\n  },\n  bring_to_safety: {\n    type: String,\n    trim: true\n  },\n  attemp_extingush: {\n    type: String,\n    trim: true\n  },\n  special_rule: {\n    type: String,\n    trim: true\n  },\n  appendix: {\n    type: String,\n    trim: true\n  },\n  file_upload: {\n    type: String,\n    trim: true\n  },\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("ReleaseFormPartB", releaseFormPartBSchema);\n\n//# sourceURL=webpack://management/./models/releaseFormPartB.js?')},"./models/releaseFormPartC.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst releaseFormPartCSchema = new Schema({\n  introduction: {\n    type: String,\n    trim: true\n  },\n  fire_protection: {\n    type: String,\n    trim: true\n  },\n  alert_procedure: {\n    type: String,\n    trim: true\n  },\n  safety_measures: {\n    type: String,\n    trim: true\n  },\n  extingush_measure: {\n    type: String,\n    trim: true\n  },\n  fire_department: {\n    type: String,\n    trim: true\n  },\n  aftercare: {\n    type: String,\n    trim: true\n  },\n  site_specific: {\n    type: String,\n    trim: true\n  },\n  appendix: {\n    type: String,\n    trim: true\n  },\n  file_upload: {\n    type: String\n  },\n  location_id: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("ReleaseFormPartC", releaseFormPartCSchema);\n\n//# sourceURL=webpack://management/./models/releaseFormPartC.js?')},"./models/sidebar.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst sidebarSchema = new Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  location: {\n    type: ObjectId,\n    ref: "Location",\n    required: true\n  },\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  /*file_upload:{\n      type:String,\n      trim : true\n  },*/\n  checked: {\n    type: Boolean,\n    default: 0 //0=>False 1=>True\n  },\n\n  completedate: {\n    type: Date\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("Sidebar", sidebarSchema);\n\n//# sourceURL=webpack://management/./models/sidebar.js?')},"./models/ticketing.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst ticketingSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  ticketing: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("TicketingSchema", ticketingSchema);\n\n//# sourceURL=webpack://management/./models/ticketing.js?')},"./models/uploadTemplate.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst {\n  ObjectId\n} = mongoose.Schema;\nconst uploadTemplateSchema = new Schema({\n  user: {\n    type: ObjectId,\n    ref: "User",\n    required: true\n  },\n  template: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("UploadTemplate", uploadTemplateSchema);\n\n//# sourceURL=webpack://management/./models/uploadTemplate.js?')},"./models/user.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  first_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  last_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  email: {\n    type: String,\n    required: true,\n    trim: true,\n    unique: true\n  },\n  password: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  role: {\n    type: String,\n    required: true,\n    default: \'user\'\n  },\n  company_name: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  phone_number: {\n    type: Number,\n    required: true,\n    trim: true\n  },\n  street: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  house_number: {\n    type: String,\n    required: true,\n    trim: true\n  },\n  password_reset_token: {\n    type: String,\n    trim: true\n  },\n  password_reset_time: {\n    type: Date,\n    trim: true\n  },\n  postal_code: {\n    type: String,\n    trim: true,\n    required: true\n  },\n  city: {\n    type: String,\n    trim: true,\n    required: true\n  },\n  land: {\n    type: String,\n    trim: true,\n    required: true\n  },\n  sales_tax_id: {\n    type: String,\n    trim: true,\n    required: true\n  },\n  about: {\n    type: String\n  },\n  avatar: {\n    type: String,\n    trim: true\n  },\n  company_logo: {\n    type: String,\n    trim: true\n  },\n  status: {\n    type: Boolean,\n    default: 1 //0=>False 1=>True/Active\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("User", userSchema);\n\n//# sourceURL=webpack://management/./models/user.js?')},"./models/userToken.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const mongoose = __webpack_require__(/*! mongoose */ "mongoose");\nconst Schema = mongoose.Schema;\nconst userTokenSchema = new Schema({\n  token: {\n    type: String,\n    required: true\n  }\n}, {\n  timestamps: true\n});\nmodule.exports = mongoose.model("UserToken", userTokenSchema);\n\n//# sourceURL=webpack://management/./models/userToken.js?')},"./routes/auth.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('var express = __webpack_require__(/*! express */ "express");\nvar router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst User = __webpack_require__(/*! ../models/user */ "./models/user.js");\nconst {\n  signup,\n  signin,\n  forget_password,\n  change_password,\n  logout\n} = __webpack_require__(/*! ../controllers/auth */ "./controllers/auth.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nrouter.post("/sign-up", [check("email").isLength({\n  max: 255\n}).isEmail().custom((value, {\n  req\n}) => {\n  return new Promise((resolve, reject) => {\n    User.findOne({\n      email: req.body.email\n    }, function (err, user) {\n      if (err) {\n        reject(new Error(\'Server Error\'));\n      }\n      if (Boolean(user)) {\n        reject(new Error(\'E-mail already in use\'));\n      }\n      resolve(true);\n    });\n  });\n}).notEmpty(), check("password").isLength({\n  max: 20\n}).notEmpty(), check("first_name").notEmpty(), check("last_name").notEmpty(), check("company_name").notEmpty(), check("phone_number").notEmpty(), check("street").notEmpty(), check("house_number").notEmpty(), check("postal_code").notEmpty(), check("city").notEmpty(), check("land").notEmpty(), check("sales_tax_id").notEmpty()], signup);\nrouter.post("/sign-in", [check("email").isLength({\n  max: 255\n}).isEmail().notEmpty(), check("password").isLength({\n  max: 255\n}).notEmpty()], signin);\nrouter.post("/forget-password", [check("email").isLength({\n  max: 255\n}).isEmail().notEmpty()], forget_password);\nrouter.post("/change-password/:password_reset_token", [check("token").notEmpty(), check("password").isLength({\n  max: 255\n}).notEmpty()], change_password);\nrouter.post("/logout", verifyToken, logout);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/auth.js?')},"./routes/calender.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createCalender,\n  getCalenderData,\n  updateCalender,\n  deleteCalender\n} = __webpack_require__(/*! ../controllers/calender */ "./controllers/calender.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/calender");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  cb(null, true);\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\n\n//actual routes\nrouter.post("/create-calender", verifyToken, upload.fields([{\n  name: \'file_upload\',\n  maxCount: 1\n}]), createCalender);\nrouter.post("/get-calender/:location_id", verifyToken, getCalenderData);\nrouter.put("/update-calender/:id", verifyToken, upload.fields([{\n  name: \'file_upload\',\n  maxCount: 1\n}]), updateCalender);\nrouter.delete("/delete-calender/:id", verifyToken, deleteCalender);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/calender.js?')},"./routes/category.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createCategory,\n  getCategoryData,\n  getSingleCategoryData,\n  updateCategory,\n  deleteCategory\n} = __webpack_require__(/*! ../controllers/category */ "./controllers/category.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nrouter.post("/create-category", verifyToken, [check("title").not().isEmpty().withMessage(\'Must Have value\'), check("color").not().isEmpty().withMessage(\'Must Have value\')], createCategory);\nrouter.post("/get-category", verifyToken, getCategoryData);\nrouter.post("/get-category/:id", verifyToken, getSingleCategoryData);\nrouter.put("/update-category/:id", [check("title").not().isEmpty().withMessage(\'Must Have value\'), check("color").not().isEmpty().withMessage(\'Must Have value\')], verifyToken, updateCategory);\nrouter.delete("/delete-category/:id", verifyToken, deleteCategory);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/category.js?')},"./routes/documentManagement.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createDocument,\n  updateDocument,\n  getSingleDocument,\n  getDocumentData,\n  deleteDocument\n} = __webpack_require__(/*! ../controllers/documentManagement */ "./controllers/documentManagement.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/documents");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === \'application/pdf\' || file.mimetype === \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\' || file.mimetype === \'text/plain\') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\nrouter.post("/create-document", verifyToken, upload.fields([{\n  name: \'upload_document\',\n  maxCount: 1\n}]), createDocument);\nrouter.put("/update-document/:id", verifyToken, upload.fields([{\n  name: \'upload_document\',\n  maxCount: 1\n}]), updateDocument);\nrouter.get("/get-document/:id", verifyToken, getSingleDocument);\nrouter.get("/get-document-data/:location_id", verifyToken, getDocumentData);\nrouter.delete("/delete-document/:id", verifyToken, deleteDocument);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/documentManagement.js?')},"./routes/drag.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createDrag,\n  getDragData,\n  updateDrag,\n  deleteDrag,\n  deleteAllDrag\n} = __webpack_require__(/*! ../controllers/drag */ "./controllers/drag.js");\nconst {\n  verifyToken,\n  checkDragExist\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\n\n//actual routes\nrouter.post("/create-drag", verifyToken, checkDragExist, [check("data").not().isEmpty().withMessage(\'Must Have value\'), check("location").not().isEmpty().withMessage(\'Must Have value\')], createDrag);\nrouter.post("/get-drag/:location_id", verifyToken, getDragData);\nrouter.put("/update-drag/:id", [check("data").not().isEmpty().withMessage(\'Must Have value\')], verifyToken, updateDrag);\n//router.delete("/delete-drag/:id",verifyToken,deleteDrag);\nrouter.post("/delete-all-drag", verifyToken, deleteAllDrag);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/drag.js?')},"./routes/evacuation.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createCacheEvacuation,\n  getCacheEvacuationData,\n  createEvacuation,\n  totalEvacuation,\n  getSingleEvacuation,\n  updateEvacuation,\n  getEvacuationData,\n  deleteEvacuation\n} = __webpack_require__(/*! ../controllers/evacuation */ "./controllers/evacuation.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nrouter.post("/create-evacuation", verifyToken, createEvacuation);\nrouter.post("/create-cache-evacuation/:id", verifyToken, createCacheEvacuation);\nrouter.get("/get-evacuation/:id", verifyToken, getSingleEvacuation);\nrouter.get("/total-evacuation/:email", verifyToken, totalEvacuation);\nrouter.get("/get-evacuation-data/:location_id", verifyToken, getEvacuationData);\nrouter.get("/get-cache-evacuation-data/:location_id", verifyToken, getCacheEvacuationData);\nrouter.put("/update-evacuation/:id", verifyToken, updateEvacuation);\nrouter.delete("/delete-evacuation/:id", verifyToken, deleteEvacuation);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/evacuation.js?')},"./routes/fireProtectionReport.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createFireProtectionReport,\n  getFireProtectionReport,\n  getFireProtectionReportData,\n  updateFireProtectionReport,\n  deleteFireProtectionReport\n} = __webpack_require__(/*! ../controllers/fireProtectionReport */ "./controllers/fireProtectionReport.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nrouter.post("/create-fire-protection-report", verifyToken, createFireProtectionReport);\nrouter.get("/get-fire-protection-report/:id", verifyToken, getFireProtectionReport);\nrouter.get("/get-fire-protection-report-data", verifyToken, getFireProtectionReportData);\nrouter.put("/update-fire-protection-report/:id", verifyToken, updateFireProtectionReport);\nrouter.delete("/delete-fire-protection-report/:id", verifyToken, deleteFireProtectionReport);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/fireProtectionReport.js?')},"./routes/form.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createForm,\n  getCacheReleaseData,\n  createCacheRelease,\n  getSingleForm,\n  getFormData,\n  updateForm,\n  deleteForm,\n  createpdf\n} = __webpack_require__(/*! ../controllers/form */ "./controllers/form.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nrouter.post("/create-pdf", createpdf);\nrouter.post("/create-form", verifyToken, createForm);\nrouter.post("/create-cache-release/:id", verifyToken, createCacheRelease);\nrouter.get("/get-form/:id", verifyToken, getSingleForm);\nrouter.get("/get-form-data/:location_id", verifyToken, getFormData);\nrouter.get("/get-cache-release-data/:location_id", verifyToken, getCacheReleaseData);\nrouter.put("/update-form/:id", verifyToken, updateForm);\nrouter.delete("/delete-form/:id", verifyToken, deleteForm);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/form.js?')},"./routes/location.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createLocation,\n  updateLocation,\n  getSingleLocation,\n  getLocationData,\n  deleteLocation\n} = __webpack_require__(/*! ../controllers/location */ "./controllers/location.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/location");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === \'image/jpeg\' || file.mimetype === \'image/png\' || file.mimetype === \'image/jpg\') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\nrouter.post("/create-location", verifyToken, upload.fields([{\n  name: \'location_image\',\n  maxCount: 1\n}, {\n  name: \'company_logo\',\n  maxCount: 1\n}]), [check("company_name").notEmpty(),\n//check("house_number").notEmpty(),\ncheck("street").notEmpty(), check("postal_code").notEmpty(), check("city").notEmpty(), check("show_as").notEmpty()\n//check("location").notEmpty(),\n//check("no_of_members").notEmpty(),\n//check("percentage").notEmpty()\n], createLocation);\nrouter.put("/update-location/:id", verifyToken, upload.fields([{\n  name: \'location_image\',\n  maxCount: 1\n}, {\n  name: \'company_logo\',\n  maxCount: 1\n}]), [check("company_name").notEmpty(),\n//check("house_number").notEmpty(),\ncheck("street").notEmpty(), check("postal_code").notEmpty(), check("city").notEmpty(), check("show_as").notEmpty()\n//check("location").notEmpty(),\n//check("no_of_members").notEmpty(),\n//check("percentage").notEmpty()\n], updateLocation);\nrouter.get("/get-location/:id", verifyToken, getSingleLocation);\nrouter.get("/get-location-data", verifyToken, getLocationData);\nrouter.delete("/delete-location/:id", verifyToken, deleteLocation);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/location.js?')},"./routes/menuDropdown.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createdropDown,\n  getMenuDropdownData,\n  getMenuDropdownDataId,\n  updateMenuDropdown,\n  deleteMenuDropDown\n} = __webpack_require__(/*! ../controllers/menuDropdown */ "./controllers/menuDropdown.js");\nconst {\n  verifyToken,\n  adminroleCheck\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\n\n//actual routes\nrouter.post("/create-menu-dropwn", verifyToken, [check("event_calender").not().isEmpty().withMessage(\'Must Have value\'), check("note").not().isEmpty().withMessage(\'Must Have value\'), check("board_fixed").not().isEmpty().withMessage(\'Must Have value\'), check("location").not().isEmpty().withMessage(\'Must Have value\')], createdropDown);\nrouter.post("/get-menu-dropdown/:location_id", verifyToken, getMenuDropdownData);\nrouter.post("/get-menu-dropdown/:id", verifyToken, getMenuDropdownDataId);\nrouter.put("/update-menu-dropdown/:id", verifyToken, [check("event_calender").not().isEmpty().withMessage(\'Must Have value\'), check("note").not().isEmpty().withMessage(\'Must Have value\'), check("board_fixed").not().isEmpty().withMessage(\'Must Have value\')], updateMenuDropdown);\nrouter.delete("/delete-menu-dropdown/:id", verifyToken, deleteMenuDropDown);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/menuDropdown.js?')},"./routes/officer.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createOfficer,\n  getOfficer,\n  getOfficerById\n} = __webpack_require__(/*! ../controllers/officer */ "./controllers/officer.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\n\n//actual routes\nrouter.post("/create-officer", verifyToken, createOfficer);\nrouter.post("/get-officer", verifyToken, getOfficer);\nrouter.post("/get-officer/:id", verifyToken, getOfficerById);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/officer.js?')},"./routes/package.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createPackage,\n  getPackage,\n  getPackageById,\n  updatePackage,\n  deletePackage\n} = __webpack_require__(/*! ../controllers/package */ "./controllers/package.js");\nconst {\n  verifyToken,\n  adminroleCheck\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nrouter.post("/create-package", verifyToken, adminroleCheck, [check("title").not().isEmpty().withMessage(\'Must Have value\'), check("price").not().isEmpty().withMessage(\'Must Have value\').isInt().withMessage(\'Must Have Integer value\'), check("package_include").not().isEmpty().withMessage(\'Must Have value\'), check("note").not().isEmpty().withMessage(\'Must Have value\')], createPackage);\nrouter.post("/get-package", getPackage);\nrouter.post("/get-package/:id", getPackageById);\nrouter.put("/update-package/:id", verifyToken, adminroleCheck, [check("title").not().isEmpty().withMessage(\'Must Have value\'), check("price").not().isEmpty().withMessage(\'Must Have value\').isInt().withMessage(\'Must Have Integer value\'), check("package_include").not().isEmpty().withMessage(\'Must Have value\'), check("note").not().isEmpty().withMessage(\'Must Have value\')], updatePackage);\n//router.delete("/delete-package/:id",verifyToken,deletePackage);\n\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/package.js?')},"./routes/plan.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createPlan,\n  updatePlan,\n  getSinglePlan,\n  getPlanData,\n  deletePlan\n} = __webpack_require__(/*! ../controllers/plan */ "./controllers/plan.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/plan");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === \'application/pdf\' || file.mimetype === \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\' || file.mimetype === \'text/plain\') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\nrouter.post("/create-plan", verifyToken, upload.fields([{\n  name: \'upload_document\',\n  maxCount: 1\n}]), createPlan);\nrouter.put("/update-plan/:id", verifyToken, upload.fields([{\n  name: \'upload_document\',\n  maxCount: 1\n}]), updatePlan);\nrouter.get("/get-plan/:id", verifyToken, getSinglePlan);\nrouter.get("/get-plan-data/:location_id", verifyToken, getPlanData);\nrouter.delete("/delete-plan/:id", verifyToken, deletePlan);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/plan.js?')},"./routes/planCategory.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createCategory,\n  getCategoryData,\n  getSingleCategoryData,\n  updateCategory,\n  deleteCategory\n} = __webpack_require__(/*! ../controllers/planCategory */ "./controllers/planCategory.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nrouter.post("/create-plan-category", verifyToken, [check("title").not().isEmpty().withMessage(\'Must Have value\'), check("color").not().isEmpty().withMessage(\'Must Have value\')], createCategory);\nrouter.post("/get-plan-category", verifyToken, getCategoryData);\nrouter.post("/get-plan-category/:id", verifyToken, getSingleCategoryData);\nrouter.put("/update-plan-category/:id", [check("title").not().isEmpty().withMessage(\'Must Have value\'), check("color").not().isEmpty().withMessage(\'Must Have value\')], verifyToken, updateCategory);\nrouter.delete("/delete-plan-category/:id", verifyToken, deleteCategory);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/planCategory.js?')},"./routes/releaseFormPartB.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createFormPartB,\n  updateFormPartB,\n  getDataMultiFormB,\n  getDataSingleFormB,\n  getSingleFormB,\n  getFormBData,\n  deleteFormB\n} = __webpack_require__(/*! ../controllers/releaseFormPartB */ "./controllers/releaseFormPartB.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/releaseform");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === \'application/pdf\' || file.mimetype === \'application/vnd.openxmlformats-officedocument.wordprocessingml.document\' || file.mimetype === \'text/plain\') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\nrouter.post("/create-form-part-b", verifyToken, upload.fields([{\n  name: \'fire_security_regulation\',\n  maxCount: 1\n}, {\n  name: \'file_upload\',\n  maxCount: 1\n}]), createFormPartB);\nrouter.put("/update-form-part-b/:location", verifyToken, upload.fields([{\n  name: \'fire_security_regulation\',\n  maxCount: 1\n}, {\n  name: \'file_upload\',\n  maxCount: 1\n}]), updateFormPartB);\nrouter.get("/get-form-part-b/:id", verifyToken, getSingleFormB);\nrouter.get("/get-form-part-b-multi/:location", verifyToken, getDataMultiFormB);\nrouter.get("/get-form-part-b-single/:id", verifyToken, getDataSingleFormB);\nrouter.get("/get-form-part-b-data", verifyToken, getFormBData);\nrouter.delete("/delete-form-part-b/:id", verifyToken, deleteFormB);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/releaseFormPartB.js?')},"./routes/releaseFormPartC.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createFormPartC,\n  updateFormPartC,\n  getSingleFormC,\n  getFormCData,\n  deleteFormC\n} = __webpack_require__(/*! ../controllers/releaseFormPartC */ "./controllers/releaseFormPartC.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/releaseform");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === \'image/jpeg\' || file.mimetype === \'image/png\' || file.mimetype === \'image/jpg\') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\nrouter.post("/create-form-part-c", verifyToken, upload.fields([{\n  name: \'file_upload\',\n  maxCount: 1\n}]), createFormPartC);\nrouter.put("/update-form-part-c/:id", verifyToken, upload.fields([{\n  name: \'file_upload\',\n  maxCount: 1\n}]), updateFormPartC);\nrouter.get("/get-form-part-c/:id", verifyToken, getSingleFormC);\nrouter.get("/get-form-part-c-data/:id", verifyToken, getFormCData);\nrouter.delete("/delete-form-part-c/:id", verifyToken, deleteFormC);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/releaseFormPartC.js?')},"./routes/sidebar.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createSidebar,\n  getSidebarData,\n  getCheckedSidebarData,\n  updateSidebar,\n  deleteSidebar,\n  checkedSidebar,\n  uncheckedSidebar\n} = __webpack_require__(/*! ../controllers/sidebar */ "./controllers/sidebar.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/sidebar");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  cb(null, true);\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\n//actual routes\nrouter.post("/create-sidebar", verifyToken, upload.fields([{\n  name: \'file_upload\',\n  maxCount: 1\n}]), createSidebar);\nrouter.post("/get-sidebar/:location_id", verifyToken, getSidebarData);\nrouter.post("/get-checked-sidebar/:location_id", verifyToken, getCheckedSidebarData);\nrouter.put("/update-sidebar/:id", verifyToken, upload.fields([{\n  name: \'file_upload\',\n  maxCount: 1\n}]), updateSidebar);\nrouter.delete("/delete-sidebar/:id", verifyToken, deleteSidebar);\nrouter.put("/checked-sidebar/:id", verifyToken, checkedSidebar);\nrouter.put("/unchecked-sidebar/:id", verifyToken, uncheckedSidebar);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/sidebar.js?')},"./routes/stripe.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  stripePayment\n} = __webpack_require__(/*! ../controllers/stripe */ "./controllers/stripe.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nrouter.post("/stripe-payment", verifyToken, [check("token").not().isEmpty().withMessage(\'Must Have value\')], stripePayment);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/stripe.js?')},"./routes/ticketing.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createTicket,\n  updateTicket,\n  getSingleTicket,\n  getTicketData,\n  deleteTicket\n} = __webpack_require__(/*! ../controllers/ticketing */ "./controllers/ticketing.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/ticketing");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === \'image/jpeg\' || file.mimetype === \'image/png\' || file.mimetype === \'image/jpg\') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\nrouter.post("/create-ticketing", verifyToken, upload.fields([{\n  name: \'ticketing\',\n  maxCount: 1\n}]), createTicket);\nrouter.put("/update-ticketing/:id", verifyToken, upload.fields([{\n  name: \'ticketing\',\n  maxCount: 1\n}]), updateTicket);\nrouter.get("/get-ticketing/:id", verifyToken, getSingleTicket);\nrouter.get("/get-ticketing-data", verifyToken, getTicketData);\nrouter.delete("/delete-ticketing/:id", verifyToken, deleteTicket);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/ticketing.js?')},"./routes/uploadTemplate.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  createUploadTemplate,\n  updateUploadTemplate,\n  getSingleTemplate,\n  getUploadDataData,\n  deleteUploadData\n} = __webpack_require__(/*! ../controllers/uploadTemplate */ "./controllers/uploadTemplate.js");\nconst {\n  verifyToken\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/template");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === \'image/jpeg\' || file.mimetype === \'image/png\' || file.mimetype === \'image/jpg\') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\nrouter.post("/create-upload-template", verifyToken, upload.fields([{\n  name: \'template\',\n  maxCount: 1\n}]), createUploadTemplate);\nrouter.put("/update-upload-template/:id", verifyToken, upload.fields([{\n  name: \'template\',\n  maxCount: 1\n}]), updateUploadTemplate);\nrouter.get("/get-upload-template/:id", verifyToken, getSingleTemplate);\nrouter.get("/get-upload-template-data", verifyToken, getUploadDataData);\nrouter.delete("/delete-upload-template/:id", verifyToken, deleteUploadData);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/uploadTemplate.js?')},"./routes/user.js":(module,__unused_webpack_exports,__webpack_require__)=>{eval('const express = __webpack_require__(/*! express */ "express");\nconst router = express.Router();\nconst {\n  check\n} = __webpack_require__(/*! express-validator */ "express-validator");\nconst {\n  getUser,\n  updateUser,\n  getUserListing,\n  getUserAdmin,\n  updateUserAdmin,\n  userActive,\n  userDeactivate,\n  deleteUser\n} = __webpack_require__(/*! ../controllers/user */ "./controllers/user.js");\nconst {\n  verifyToken,\n  adminroleCheck\n} = __webpack_require__(/*! ../middleware/auth */ "./middleware/auth.js");\nvar multer = __webpack_require__(/*! multer */ "multer");\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, "./uploads/location");\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + file.originalname);\n  }\n});\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === \'image/jpeg\' || file.mimetype === \'image/png\' || file.mimetype === \'image/jpg\') {\n    cb(null, true);\n  } else {\n    cb(null, false);\n  }\n};\nvar upload = multer({\n  storage: storage,\n  fileFilter: fileFilter\n});\n\n//actual routes\nrouter.post("/get-profile", verifyToken, getUser);\nrouter.put("/update-profile", verifyToken, upload.fields([{\n  name: \'avatar\',\n  maxCount: 1\n}, {\n  name: \'company_logo\',\n  maxCount: 1\n}]), updateUser);\n// router.put("/update-profile",verifyToken,[\n//     check("first_name").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("last_name").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("company_name").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("phone_number").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("street").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("house_number").not().isEmpty().withMessage(\'Must Have value\'),\n//     //check("about").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("postal_code").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("city").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("land").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("sales_tax_id").not().isEmpty().withMessage(\'Must Have value\')\n// ],updateUser);\n\nrouter.post("/get-user-listing", verifyToken, adminroleCheck, getUserListing);\nrouter.post("/get-user-detail/:id", verifyToken, adminroleCheck, getUserAdmin);\nrouter.put("/update-user-admin/:id", verifyToken, upload.fields([{\n  name: \'avatar\',\n  maxCount: 1\n}, {\n  name: \'company_logo\',\n  maxCount: 1\n}]), updateUserAdmin);\n// router.put("/update-user-admin/:id",verifyToken,[\n//     check("first_name").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("last_name").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("company_name").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("phone_number").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("street").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("house_number").not().isEmpty().withMessage(\'Must Have value\'),\n//     //check("about").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("postal_code").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("city").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("land").not().isEmpty().withMessage(\'Must Have value\'),\n//     check("sales_tax_id").not().isEmpty().withMessage(\'Must Have value\')\n\n// ],updateUserAdmin);\n\nrouter.post("/user-active/:id", verifyToken, adminroleCheck, userActive);\nrouter.post("/user-deactive/:id", verifyToken, adminroleCheck, userDeactivate);\nrouter.delete("/user-delete/:id", verifyToken, adminroleCheck, deleteUser);\nmodule.exports = router;\n\n//# sourceURL=webpack://management/./routes/user.js?')},"@sendgrid/mail":e=>{"use strict";e.exports=require("@sendgrid/mail")},bcrypt:e=>{"use strict";e.exports=require("bcrypt")},"body-parser":e=>{"use strict";e.exports=require("body-parser")},"cookie-parser":e=>{"use strict";e.exports=require("cookie-parser")},cors:e=>{"use strict";e.exports=require("cors")},dotenv:e=>{"use strict";e.exports=require("dotenv")},express:e=>{"use strict";e.exports=require("express")},"express-validator":e=>{"use strict";e.exports=require("express-validator")},"html-pdf":e=>{"use strict";e.exports=require("html-pdf")},"html-pdf-node":e=>{"use strict";e.exports=require("html-pdf-node")},jsonwebtoken:e=>{"use strict";e.exports=require("jsonwebtoken")},moment:e=>{"use strict";e.exports=require("moment")},mongoose:e=>{"use strict";e.exports=require("mongoose")},multer:e=>{"use strict";e.exports=require("multer")},stripe:e=>{"use strict";e.exports=require("stripe")},uuid:e=>{"use strict";e.exports=require("uuid")},fs:e=>{"use strict";e.exports=require("fs")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](r,r.exports,__webpack_require__),r.exports}var __webpack_exports__=__webpack_require__("./app.js")})();